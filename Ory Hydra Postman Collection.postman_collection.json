{
	"info": {
		"_postman_id": "513091a1-2e41-4c36-a349-5a515a65437a",
		"name": "Ory Hydra Postman Collection",
		"description": "Welcome to the ORY Hydra HTTP API documentation. You will find documentation for all HTTP APIs here.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": ".well-known",
			"item": [
				{
					"name": "JSON Web Keys Discovery",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl1}}/.well-known/jwks.json",
							"host": [
								"{{baseUrl1}}"
							],
							"path": [
								".well-known",
								"jwks.json"
							]
						},
						"description": "This endpoint returns JSON Web Keys to be used as public keys for verifying OpenID Connect ID Tokens and,\nif enabled, OAuth 2.0 JWT Access Tokens. This endpoint can be used with client libraries like\n[node-jwks-rsa](https://github.com/auth0/node-jwks-rsa) among others."
					},
					"response": [
						{
							"name": "JSONWebKeySet",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/.well-known/jwks.json",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										".well-known",
										"jwks.json"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"keys\": [\n\t\t{\n\t\t\t\"use\": \"<string>\",\n\t\t\t\"kty\": \"<string>\",\n\t\t\t\"kid\": \"<string>\",\n\t\t\t\"alg\": \"<string>\",\n\t\t\t\"crv\": \"<string>\",\n\t\t\t\"d\": \"<string>\",\n\t\t\t\"dp\": \"<string>\",\n\t\t\t\"dq\": \"<string>\",\n\t\t\t\"e\": \"<string>\",\n\t\t\t\"k\": \"<string>\",\n\t\t\t\"n\": \"<string>\",\n\t\t\t\"p\": \"<string>\",\n\t\t\t\"q\": \"<string>\",\n\t\t\t\"qi\": \"<string>\",\n\t\t\t\"x\": \"<string>\",\n\t\t\t\"x5c\": [\n\t\t\t\t\"<string>\",\n\t\t\t\t\"<string>\"\n\t\t\t],\n\t\t\t\"y\": \"<string>\"\n\t\t},\n\t\t{\n\t\t\t\"use\": \"<string>\",\n\t\t\t\"kty\": \"<string>\",\n\t\t\t\"kid\": \"<string>\",\n\t\t\t\"alg\": \"<string>\",\n\t\t\t\"crv\": \"<string>\",\n\t\t\t\"d\": \"<string>\",\n\t\t\t\"dp\": \"<string>\",\n\t\t\t\"dq\": \"<string>\",\n\t\t\t\"e\": \"<string>\",\n\t\t\t\"k\": \"<string>\",\n\t\t\t\"n\": \"<string>\",\n\t\t\t\"p\": \"<string>\",\n\t\t\t\"q\": \"<string>\",\n\t\t\t\"qi\": \"<string>\",\n\t\t\t\"x\": \"<string>\",\n\t\t\t\"x5c\": [\n\t\t\t\t\"<string>\",\n\t\t\t\t\"<string>\"\n\t\t\t],\n\t\t\t\"y\": \"<string>\"\n\t\t}\n\t]\n}"
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/.well-known/jwks.json",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										".well-known",
										"jwks.json"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						}
					]
				},
				{
					"name": "OpenID Connect Discovery",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl1}}/.well-known/openid-configuration",
							"host": [
								"{{baseUrl1}}"
							],
							"path": [
								".well-known",
								"openid-configuration"
							]
						},
						"description": "The well known endpoint an be used to retrieve information for OpenID Connect clients. We encourage you to not roll\nyour own OpenID Connect client but to use an OpenID Connect client library instead. You can learn more on this\nflow at https://openid.net/specs/openid-connect-discovery-1_0.html .\n\nPopular libraries for OpenID Connect clients include oidc-client-js (JavaScript), go-oidc (Golang), and others.\nFor a full list of clients go here: https://openid.net/developers/certified/"
					},
					"response": [
						{
							"name": "wellKnown",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/.well-known/openid-configuration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										".well-known",
										"openid-configuration"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"issuer\": \"<string>\",\n\t\"authorization_endpoint\": \"<string>\",\n\t\"token_endpoint\": \"<string>\",\n\t\"jwks_uri\": \"<string>\",\n\t\"subject_types_supported\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"response_types_supported\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"id_token_signing_alg_values_supported\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"backchannel_logout_session_supported\": \"<boolean>\",\n\t\"backchannel_logout_supported\": \"<boolean>\",\n\t\"claims_parameter_supported\": \"<boolean>\",\n\t\"claims_supported\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"end_session_endpoint\": \"<string>\",\n\t\"frontchannel_logout_session_supported\": \"<boolean>\",\n\t\"frontchannel_logout_supported\": \"<boolean>\",\n\t\"grant_types_supported\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"registration_endpoint\": \"<string>\",\n\t\"request_object_signing_alg_values_supported\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"request_parameter_supported\": \"<boolean>\",\n\t\"request_uri_parameter_supported\": \"<boolean>\",\n\t\"require_request_uri_registration\": \"<boolean>\",\n\t\"response_modes_supported\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"revocation_endpoint\": \"<string>\",\n\t\"scopes_supported\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"token_endpoint_auth_methods_supported\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"userinfo_endpoint\": \"<string>\",\n\t\"userinfo_signing_alg_values_supported\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t]\n}"
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/.well-known/openid-configuration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										".well-known",
										"openid-configuration"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/.well-known/openid-configuration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										".well-known",
										"openid-configuration"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "clients",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Get an OAuth 2.0 Client.",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/clients/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "my-client",
											"description": "(Required) The id of the OAuth 2.0 Client."
										}
									]
								},
								"description": "Get an OAUth 2.0 client by its ID. This endpoint never returns passwords.\n\nOAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components."
							},
							"response": [
								{
									"name": "oAuth2Client",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/clients/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"clients",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"allowed_cors_origins\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"audience\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"backchannel_logout_session_required\": \"<boolean>\",\n\t\"backchannel_logout_uri\": \"<string>\",\n\t\"client_id\": \"<string>\",\n\t\"client_name\": \"<string>\",\n\t\"client_secret\": \"<string>\",\n\t\"client_secret_expires_at\": \"<long>\",\n\t\"client_uri\": \"<string>\",\n\t\"contacts\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"created_at\": \"<dateTime>\",\n\t\"frontchannel_logout_session_required\": \"<boolean>\",\n\t\"frontchannel_logout_uri\": \"<string>\",\n\t\"grant_types\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"jwks\": \"<object>\",\n\t\"jwks_uri\": \"<string>\",\n\t\"logo_uri\": \"<string>\",\n\t\"metadata\": \"<object>\",\n\t\"owner\": \"<string>\",\n\t\"policy_uri\": \"<string>\",\n\t\"post_logout_redirect_uris\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"redirect_uris\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"request_object_signing_alg\": \"<string>\",\n\t\"request_uris\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"response_types\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"scope\": \"<string>\",\n\t\"sector_identifier_uri\": \"<string>\",\n\t\"subject_type\": \"<string>\",\n\t\"token_endpoint_auth_method\": \"<string>\",\n\t\"token_endpoint_auth_signing_alg\": \"<string>\",\n\t\"tos_uri\": \"<string>\",\n\t\"updated_at\": \"<dateTime>\",\n\t\"userinfo_signed_response_alg\": \"<string>\"\n}"
								},
								{
									"name": "genericError",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/clients/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"clients",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
								},
								{
									"name": "genericError",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/clients/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"clients",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
								}
							]
						},
						{
							"name": "Update an OAuth 2.0 Client",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "   {\n        \"client_id\": \"auth-code-client\",\n        \"client_name\": \"vw-demo\",\n        \"redirect_uris\": [\n            \"http://127.0.0.1:8000/api/token\"\n        ],\n        \"grant_types\": [\n            \"authorization_code\",\n            \"refresh_token\"\n        ],\n        \"response_types\": [\n            \"code\",\n            \"id_token\"\n        ],\n        \"scope\": \"openid offline\",\n        \"audience\": [],\n        \"owner\": \"\",\n        \"policy_uri\": \"\",\n        \"allowed_cors_origins\": [],\n        \"tos_uri\": \"\",\n        \"client_uri\": \"http://localhost:8001/\",\n        \"logo_uri\": \"\",\n        \"contacts\": [],\n        \"client_secret_expires_at\": 0,\n        \"subject_type\": \"public\",\n        \"jwks\": {},\n        \"token_endpoint_auth_method\": \"client_secret_post\",\n        \"userinfo_signed_response_alg\": \"none\",\n        \"created_at\": \"2022-01-31T17:29:33Z\",\n        \"updated_at\": \"2022-01-31T17:29:32.760925Z\",\n        \"metadata\": {}\n    }"
								},
								"url": {
									"raw": "{{baseUrl}}/clients/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "auth-code-client",
											"description": "(Required) "
										}
									]
								},
								"description": "Update an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.\n\nOAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components."
							},
							"response": [
								{
									"name": "oAuth2Client",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/clients/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"clients",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"allowed_cors_origins\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"audience\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"backchannel_logout_session_required\": \"<boolean>\",\n\t\"backchannel_logout_uri\": \"<string>\",\n\t\"client_id\": \"<string>\",\n\t\"client_name\": \"<string>\",\n\t\"client_secret\": \"<string>\",\n\t\"client_secret_expires_at\": \"<long>\",\n\t\"client_uri\": \"<string>\",\n\t\"contacts\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"created_at\": \"<dateTime>\",\n\t\"frontchannel_logout_session_required\": \"<boolean>\",\n\t\"frontchannel_logout_uri\": \"<string>\",\n\t\"grant_types\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"jwks\": \"<object>\",\n\t\"jwks_uri\": \"<string>\",\n\t\"logo_uri\": \"<string>\",\n\t\"metadata\": \"<object>\",\n\t\"owner\": \"<string>\",\n\t\"policy_uri\": \"<string>\",\n\t\"post_logout_redirect_uris\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"redirect_uris\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"request_object_signing_alg\": \"<string>\",\n\t\"request_uris\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"response_types\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"scope\": \"<string>\",\n\t\"sector_identifier_uri\": \"<string>\",\n\t\"subject_type\": \"<string>\",\n\t\"token_endpoint_auth_method\": \"<string>\",\n\t\"token_endpoint_auth_signing_alg\": \"<string>\",\n\t\"tos_uri\": \"<string>\",\n\t\"updated_at\": \"<dateTime>\",\n\t\"userinfo_signed_response_alg\": \"<string>\"\n}"
								},
								{
									"name": "genericError",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/clients/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"clients",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
								}
							]
						},
						{
							"name": "Deletes an OAuth 2.0 Client",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/clients/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "sit do in dolor Ut",
											"description": "(Required) The id of the OAuth 2.0 Client."
										}
									]
								},
								"description": "Delete an existing OAuth 2.0 Client by its ID.\n\nOAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components."
							},
							"response": [
								{
									"name": "Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\ntypically 201.",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/clients/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"clients",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "genericError",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/clients/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"clients",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
								},
								{
									"name": "genericError",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/clients/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"clients",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
								}
							]
						},
						{
							"name": "Patch an OAuth 2.0 Client",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    {\n        \"op\": \"\\\"replace\\\"\",\n        \"path\": \"\\\"/name\\\"\",\n        \"from\": \"ea nisi\",\n        \"value\": {}\n    },\n    {\n        \"op\": \"\\\"replace\\\"\",\n        \"path\": \"\\\"/name\\\"\",\n        \"from\": \"veniam eu\",\n        \"value\": {}\n    }\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/clients/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "sit do in dolor Ut",
											"description": "(Required) "
										}
									]
								},
								"description": "Patch an existing OAuth 2.0 Client. If you pass `client_secret` the secret will be updated and returned via the API. This is the only time you will be able to retrieve the client secret, so write it down and keep it safe.\n\nOAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components."
							},
							"response": [
								{
									"name": "oAuth2Client",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"op\": \"occaecat ut\",\n        \"path\": \"commodo cupidatat aliqua Excepteur\",\n        \"from\": \"in sit\",\n        \"value\": {}\n    },\n    {\n        \"op\": \"voluptate dolore occaecat dolore\",\n        \"path\": \"incididunt sint reprehenderit Excepteur\",\n        \"from\": \"voluptate Ut ullamco ad\",\n        \"value\": {}\n    }\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/clients/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"clients",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"allowed_cors_origins\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"audience\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"backchannel_logout_session_required\": \"<boolean>\",\n\t\"backchannel_logout_uri\": \"<string>\",\n\t\"client_id\": \"<string>\",\n\t\"client_name\": \"<string>\",\n\t\"client_secret\": \"<string>\",\n\t\"client_secret_expires_at\": \"<long>\",\n\t\"client_uri\": \"<string>\",\n\t\"contacts\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"created_at\": \"<dateTime>\",\n\t\"frontchannel_logout_session_required\": \"<boolean>\",\n\t\"frontchannel_logout_uri\": \"<string>\",\n\t\"grant_types\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"jwks\": \"<object>\",\n\t\"jwks_uri\": \"<string>\",\n\t\"logo_uri\": \"<string>\",\n\t\"metadata\": \"<object>\",\n\t\"owner\": \"<string>\",\n\t\"policy_uri\": \"<string>\",\n\t\"post_logout_redirect_uris\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"redirect_uris\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"request_object_signing_alg\": \"<string>\",\n\t\"request_uris\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"response_types\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"scope\": \"<string>\",\n\t\"sector_identifier_uri\": \"<string>\",\n\t\"subject_type\": \"<string>\",\n\t\"token_endpoint_auth_method\": \"<string>\",\n\t\"token_endpoint_auth_signing_alg\": \"<string>\",\n\t\"tos_uri\": \"<string>\",\n\t\"updated_at\": \"<dateTime>\",\n\t\"userinfo_signed_response_alg\": \"<string>\"\n}"
								},
								{
									"name": "genericError",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"op\": \"occaecat ut\",\n        \"path\": \"commodo cupidatat aliqua Excepteur\",\n        \"from\": \"in sit\",\n        \"value\": {}\n    },\n    {\n        \"op\": \"voluptate dolore occaecat dolore\",\n        \"path\": \"incididunt sint reprehenderit Excepteur\",\n        \"from\": \"voluptate Ut ullamco ad\",\n        \"value\": {}\n    }\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/clients/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"clients",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "List OAuth 2.0 Clients",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients"
							],
							"query": [
								{
									"key": "limit",
									"value": "-28293429",
									"description": "The maximum amount of policies returned, upper bound is 500 policies",
									"disabled": true
								},
								{
									"key": "offset",
									"value": "-28293429",
									"description": "The offset from where to start looking.",
									"disabled": true
								}
							]
						},
						"description": "This endpoint lists all clients in the database, and never returns client secrets. As a default it lists the first 100 clients. The `limit` parameter can be used to retrieve more clients, but it has an upper bound at 500 objects. Pagination should be used to retrieve more than 500 objects.\n\nOAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components.\nThe \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: '<https://hydra-url/admin/clients?limit={limit}&offset={offset}>; rel=\"{page}\"', where page is one of the following applicable pages: 'first', 'next', 'last', and 'previous'.\nMultiple links can be included in this header, and will be separated by a comma."
					},
					"response": [
						{
							"name": "A list of clients.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/clients?limit=<integer>&offset=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients"
									],
									"query": [
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "offset",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n\t{\n\t\t\"allowed_cors_origins\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"audience\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"backchannel_logout_session_required\": \"<boolean>\",\n\t\t\"backchannel_logout_uri\": \"<string>\",\n\t\t\"client_id\": \"<string>\",\n\t\t\"client_name\": \"<string>\",\n\t\t\"client_secret\": \"<string>\",\n\t\t\"client_secret_expires_at\": \"<long>\",\n\t\t\"client_uri\": \"<string>\",\n\t\t\"contacts\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"created_at\": \"<dateTime>\",\n\t\t\"frontchannel_logout_session_required\": \"<boolean>\",\n\t\t\"frontchannel_logout_uri\": \"<string>\",\n\t\t\"grant_types\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"jwks\": \"<object>\",\n\t\t\"jwks_uri\": \"<string>\",\n\t\t\"logo_uri\": \"<string>\",\n\t\t\"metadata\": \"<object>\",\n\t\t\"owner\": \"<string>\",\n\t\t\"policy_uri\": \"<string>\",\n\t\t\"post_logout_redirect_uris\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"redirect_uris\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"request_object_signing_alg\": \"<string>\",\n\t\t\"request_uris\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"response_types\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"scope\": \"<string>\",\n\t\t\"sector_identifier_uri\": \"<string>\",\n\t\t\"subject_type\": \"<string>\",\n\t\t\"token_endpoint_auth_method\": \"<string>\",\n\t\t\"token_endpoint_auth_signing_alg\": \"<string>\",\n\t\t\"tos_uri\": \"<string>\",\n\t\t\"updated_at\": \"<dateTime>\",\n\t\t\"userinfo_signed_response_alg\": \"<string>\"\n\t},\n\t{\n\t\t\"allowed_cors_origins\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"audience\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"backchannel_logout_session_required\": \"<boolean>\",\n\t\t\"backchannel_logout_uri\": \"<string>\",\n\t\t\"client_id\": \"<string>\",\n\t\t\"client_name\": \"<string>\",\n\t\t\"client_secret\": \"<string>\",\n\t\t\"client_secret_expires_at\": \"<long>\",\n\t\t\"client_uri\": \"<string>\",\n\t\t\"contacts\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"created_at\": \"<dateTime>\",\n\t\t\"frontchannel_logout_session_required\": \"<boolean>\",\n\t\t\"frontchannel_logout_uri\": \"<string>\",\n\t\t\"grant_types\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"jwks\": \"<object>\",\n\t\t\"jwks_uri\": \"<string>\",\n\t\t\"logo_uri\": \"<string>\",\n\t\t\"metadata\": \"<object>\",\n\t\t\"owner\": \"<string>\",\n\t\t\"policy_uri\": \"<string>\",\n\t\t\"post_logout_redirect_uris\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"redirect_uris\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"request_object_signing_alg\": \"<string>\",\n\t\t\"request_uris\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"response_types\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"scope\": \"<string>\",\n\t\t\"sector_identifier_uri\": \"<string>\",\n\t\t\"subject_type\": \"<string>\",\n\t\t\"token_endpoint_auth_method\": \"<string>\",\n\t\t\"token_endpoint_auth_signing_alg\": \"<string>\",\n\t\t\"tos_uri\": \"<string>\",\n\t\t\"updated_at\": \"<dateTime>\",\n\t\t\"userinfo_signed_response_alg\": \"<string>\"\n\t}\n]"
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/clients?limit=<integer>&offset=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients"
									],
									"query": [
										{
											"key": "limit",
											"value": "<integer>"
										},
										{
											"key": "offset",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						}
					]
				},
				{
					"name": "Create an OAuth 2.0 Client",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "   {\n        \"client_id\": \"auth-code-client\",\n        \"client_name\": \"vw-demo\",\n        \"redirect_uris\": [\n            \"http://127.0.0.1:8000/callback/\"\n        ],\n        \"grant_types\": [\n            \"authorization_code\",\n            \"refresh_token\"\n        ],\n        \"response_types\": [\n            \"code\",\n            \"id_token\"\n        ],\n        \"scope\": \"openid offline\",\n        \"audience\": [],\n        \"owner\": \"\",\n        \"policy_uri\": \"\",\n        \"allowed_cors_origins\": [],\n        \"tos_uri\": \"\",\n        \"client_uri\": \"http://localhost:8001/\",\n        \"logo_uri\": \"\",\n        \"contacts\": [],\n        \"client_secret_expires_at\": 0,\n        \"subject_type\": \"public\",\n        \"jwks\": {},\n        \"token_endpoint_auth_method\": \"client_secret_post\",\n        \"userinfo_signed_response_alg\": \"none\",\n        \"created_at\": \"2022-01-31T17:29:33Z\",\n        \"updated_at\": \"2022-01-31T17:29:32.760925Z\",\n        \"metadata\": {}\n    }"
						},
						"url": {
							"raw": "{{baseUrl}}/clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clients"
							]
						},
						"description": "Create a new OAuth 2.0 client If you pass `client_secret` the secret will be used, otherwise a random secret will be generated. The secret will be returned in the response and you will not be able to retrieve it later on. Write the secret down and keep it somwhere safe.\n\nOAuth 2.0 clients are used to perform OAuth 2.0 and OpenID Connect flows. Usually, OAuth 2.0 clients are generated for applications which want to consume your OAuth 2.0 or OpenID Connect capabilities. To manage ORY Hydra, you will need an OAuth 2.0 Client as well. Make sure that this endpoint is well protected and only callable by first-party components."
					},
					"response": [
						{
							"name": "oAuth2Client",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/clients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"allowed_cors_origins\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"audience\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"backchannel_logout_session_required\": \"<boolean>\",\n\t\"backchannel_logout_uri\": \"<string>\",\n\t\"client_id\": \"<string>\",\n\t\"client_name\": \"<string>\",\n\t\"client_secret\": \"<string>\",\n\t\"client_secret_expires_at\": \"<long>\",\n\t\"client_uri\": \"<string>\",\n\t\"contacts\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"created_at\": \"<dateTime>\",\n\t\"frontchannel_logout_session_required\": \"<boolean>\",\n\t\"frontchannel_logout_uri\": \"<string>\",\n\t\"grant_types\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"jwks\": \"<object>\",\n\t\"jwks_uri\": \"<string>\",\n\t\"logo_uri\": \"<string>\",\n\t\"metadata\": \"<object>\",\n\t\"owner\": \"<string>\",\n\t\"policy_uri\": \"<string>\",\n\t\"post_logout_redirect_uris\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"redirect_uris\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"request_object_signing_alg\": \"<string>\",\n\t\"request_uris\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"response_types\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"scope\": \"<string>\",\n\t\"sector_identifier_uri\": \"<string>\",\n\t\"subject_type\": \"<string>\",\n\t\"token_endpoint_auth_method\": \"<string>\",\n\t\"token_endpoint_auth_signing_alg\": \"<string>\",\n\t\"tos_uri\": \"<string>\",\n\t\"updated_at\": \"<dateTime>\",\n\t\"userinfo_signed_response_alg\": \"<string>\"\n}"
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/clients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/clients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/clients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						},
						{
							"name": "Create an OAuth 2.0 Client",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "   {\n        \"client_id\": \"auth-code-client\",\n        \"client_name\": \"vw-demo\",\n        \"redirect_uris\": [\n            \"http://127.0.0.1:8000/callback/\"\n        ],\n        \"grant_types\": [\n            \"authorization_code\",\n            \"refresh_token\"\n        ],\n        \"response_types\": [\n            \"code\",\n            \"id_token\"\n        ],\n        \"scope\": \"openid offline\",\n        \"audience\": [],\n        \"owner\": \"\",\n        \"policy_uri\": \"\",\n        \"allowed_cors_origins\": [],\n        \"tos_uri\": \"\",\n        \"client_uri\": \"http://localhost:8001/\",\n        \"logo_uri\": \"\",\n        \"contacts\": [],\n        \"client_secret_expires_at\": 0,\n        \"subject_type\": \"public\",\n        \"jwks\": {},\n        \"token_endpoint_auth_method\": \"client_secret_post\",\n        \"userinfo_signed_response_alg\": \"none\",\n        \"created_at\": \"2022-01-31T17:29:33Z\",\n        \"updated_at\": \"2022-01-31T17:29:32.760925Z\",\n        \"metadata\": {}\n    }"
								},
								"url": {
									"raw": "{{baseUrl}}/clients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"clients"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Location",
									"value": "/clients/auth-code-client"
								},
								{
									"key": "Date",
									"value": "Sat, 19 Feb 2022 10:49:14 GMT"
								},
								{
									"key": "Content-Length",
									"value": "659"
								}
							],
							"cookie": [],
							"body": "{\n    \"client_id\": \"auth-code-client\",\n    \"client_name\": \"vw-demo\",\n    \"client_secret\": \"rrBP62TLbePFpNdiLJWHNyzEn9\",\n    \"redirect_uris\": [\n        \"http://127.0.0.1:8000/callback/\"\n    ],\n    \"grant_types\": [\n        \"authorization_code\",\n        \"refresh_token\"\n    ],\n    \"response_types\": [\n        \"code\",\n        \"id_token\"\n    ],\n    \"scope\": \"openid offline\",\n    \"audience\": [],\n    \"owner\": \"\",\n    \"policy_uri\": \"\",\n    \"allowed_cors_origins\": [],\n    \"tos_uri\": \"\",\n    \"client_uri\": \"http://localhost:8001/\",\n    \"logo_uri\": \"\",\n    \"contacts\": [],\n    \"client_secret_expires_at\": 0,\n    \"subject_type\": \"public\",\n    \"jwks\": {},\n    \"token_endpoint_auth_method\": \"client_secret_post\",\n    \"userinfo_signed_response_alg\": \"none\",\n    \"created_at\": \"2022-02-19T10:49:14Z\",\n    \"updated_at\": \"2022-02-19T10:49:14.584433Z\",\n    \"metadata\": {}\n}"
						}
					]
				}
			]
		},
		{
			"name": "health",
			"item": [
				{
					"name": "Check Alive Status",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health/alive",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"health",
								"alive"
							]
						},
						"description": "This endpoint returns a 200 status code when the HTTP server is up running.\nThis status does currently not include checks whether the database connection is working.\n\nIf the service supports TLS Edge Termination, this endpoint does not require the\n`X-Forwarded-Proto` header to be set.\n\nBe aware that if you are running multiple nodes of this service, the health status will never\nrefer to the cluster state, only to a single instance."
					},
					"response": [
						{
							"name": "healthStatus",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/health/alive",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"health",
										"alive"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"status\": \"<string>\"\n}"
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/health/alive",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"health",
										"alive"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						}
					]
				},
				{
					"name": "Check Readiness Status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/health/ready",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"health",
								"ready"
							]
						},
						"description": "This endpoint returns a 200 status code when the HTTP server is up running and the environment dependencies (e.g.\nthe database) are responsive as well.\n\nIf the service supports TLS Edge Termination, this endpoint does not require the\n`X-Forwarded-Proto` header to be set.\n\nBe aware that if you are running multiple nodes of this service, the health status will never\nrefer to the cluster state, only to a single instance."
					},
					"response": [
						{
							"name": "healthStatus",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/health/ready",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"health",
										"ready"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"status\": \"<string>\"\n}"
						},
						{
							"name": "healthNotReadyStatus",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/health/ready",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"health",
										"ready"
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"errors\": \"<object>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "keys/{set}",
			"item": [
				{
					"name": "{kid}",
					"item": [
						{
							"name": "Fetch a JSON Web Key",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/keys/:set/:kid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"keys",
										":set",
										":kid"
									],
									"variable": [
										{
											"key": "kid",
											"value": "sit do in dolor Ut",
											"description": "(Required) The kid of the desired key"
										},
										{
											"key": "set",
											"value": "sit do in dolor Ut",
											"description": "(Required) The set"
										}
									]
								},
								"description": "This endpoint returns a singular JSON Web Key, identified by the set and the specific key ID (kid)."
							},
							"response": [
								{
									"name": "JSONWebKeySet",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/keys/:set/:kid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"keys",
												":set",
												":kid"
											],
											"variable": [
												{
													"key": "set"
												},
												{
													"key": "kid"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"keys\": [\n\t\t{\n\t\t\t\"use\": \"<string>\",\n\t\t\t\"kty\": \"<string>\",\n\t\t\t\"kid\": \"<string>\",\n\t\t\t\"alg\": \"<string>\",\n\t\t\t\"crv\": \"<string>\",\n\t\t\t\"d\": \"<string>\",\n\t\t\t\"dp\": \"<string>\",\n\t\t\t\"dq\": \"<string>\",\n\t\t\t\"e\": \"<string>\",\n\t\t\t\"k\": \"<string>\",\n\t\t\t\"n\": \"<string>\",\n\t\t\t\"p\": \"<string>\",\n\t\t\t\"q\": \"<string>\",\n\t\t\t\"qi\": \"<string>\",\n\t\t\t\"x\": \"<string>\",\n\t\t\t\"x5c\": [\n\t\t\t\t\"<string>\",\n\t\t\t\t\"<string>\"\n\t\t\t],\n\t\t\t\"y\": \"<string>\"\n\t\t},\n\t\t{\n\t\t\t\"use\": \"<string>\",\n\t\t\t\"kty\": \"<string>\",\n\t\t\t\"kid\": \"<string>\",\n\t\t\t\"alg\": \"<string>\",\n\t\t\t\"crv\": \"<string>\",\n\t\t\t\"d\": \"<string>\",\n\t\t\t\"dp\": \"<string>\",\n\t\t\t\"dq\": \"<string>\",\n\t\t\t\"e\": \"<string>\",\n\t\t\t\"k\": \"<string>\",\n\t\t\t\"n\": \"<string>\",\n\t\t\t\"p\": \"<string>\",\n\t\t\t\"q\": \"<string>\",\n\t\t\t\"qi\": \"<string>\",\n\t\t\t\"x\": \"<string>\",\n\t\t\t\"x5c\": [\n\t\t\t\t\"<string>\",\n\t\t\t\t\"<string>\"\n\t\t\t],\n\t\t\t\"y\": \"<string>\"\n\t\t}\n\t]\n}"
								},
								{
									"name": "genericError",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/keys/:set/:kid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"keys",
												":set",
												":kid"
											],
											"variable": [
												{
													"key": "set"
												},
												{
													"key": "kid"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
								},
								{
									"name": "genericError",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/keys/:set/:kid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"keys",
												":set",
												":kid"
											],
											"variable": [
												{
													"key": "set"
												},
												{
													"key": "kid"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
								}
							]
						},
						{
							"name": "Update a JSON Web Key",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"use\": \"sig\",\n    \"kty\": \"RSA\",\n    \"kid\": \"1603dfe0af8f4596\",\n    \"alg\": \"RS256\",\n    \"crv\": \"P-256\",\n    \"d\": \"T_N8I-6He3M8a7X1vWt6TGIx4xB_GP3Mb4SsZSA4v-orvJzzRiQhLlRR81naWYxfQAYt5isDI6_C2L9bdWo4FFPjGQFvNoRX-_sBJyBI_rl-TBgsZYoUlAj3J92WmY2inbA-PwyJfsaIIDceYBC-eX-xiCu6qMqkZi3MwQAFL6bMdPEM0z4JBcwFT3VdiWAIRUuACWQwrXMq672x7fMuaIaHi7XDGgt1ith23CLfaREmJku9PQcchbt_uEY-hqrFY6ntTtS4paWWQj86xLL94S-Tf6v6xkL918PfLSOTq6XCzxvlFwzBJqApnAhbwqLjpPhgUG04EDRrqrSBc5Y1BLevn6Ip5h1AhessBp3wLkQgz_roeckt-ybvzKTjESMuagnpqLvOT7Y9veIug2MwPJZI2VjczRc1vzMs25XrFQ8DpUy-bNdp89TmvAXwctUMiJdgHloJw23Cv03gIUAkDnsTqZmkpbIf-crpgNKFmQP_EDKoe8p_PXZZgfbRri3NoEVGP7Mk6yEu8LjJhClhZaBNjuWw2-KlBfOA3g79mhfBnkInee5KO9mGR50qPk1V-MorUYNTFMZIm0kFE6eYVWFBwJHLKYhHU34DoiK1VP-svZpC2uAMFNA_UJEwM9CQ2b8qe4-5e9aywMvwcuArRkAB5mBIfOaOJao3mfukKAE\",\n    \"dp\": \"G4sPXkc6Ya9y8oJW9_ILj4xuppu0lzi_H7VTkS8xj5SdX3coE0oimYwxIi2emTAue0UOa5dpgFGyBJ4c8tQ2VF402XRugKDTP8akYhFo5tAA77Qe_NmtuYZc3C3m3I24G2GvR5sSDxUyAN2zq8Lfn9EUms6rY3Ob8YeiKkTiBj0\",\n    \"dq\": \"s9lAH9fggBsoFR8Oac2R_E2gw282rT2kGOAhvIllETE1efrA6huUUvMfBcMpn8lqeW6vzznYY5SSQF7pMdC_agI3nG8Ibp1BUb0JUiraRNqUfLhcQb_d9GF4Dh7e74WbRsobRonujTYN1xCaP6TO61jvWrX-L18txXw494Q_cgk\",\n    \"e\": \"AQAB\",\n    \"k\": \"GawgguFyGrWKav7AX4VKUg\",\n    \"n\": \"vTqrxUyQPl_20aqf5kXHwDZrel-KovIp8s7ewJod2EXHl8tWlRB3_Rem34KwBfqlKQGp1nqah-51H4Jzruqe0cFP58hPEIt6WqrvnmJCXxnNuIB53iX_uUUXXHDHBeaPCSRoNJzNysjoJ30TIUsKBiirhBa7f235PXbKiHducLevV6PcKxJ5cY8zO286qJLBWSPm-OIevwqsIsSIH44Qtm9sioFikhkbLwoqwWORGAY0nl6XvVOlhADdLjBSqSAeT1FPuCDCnXwzCDR8N9IFB_IjdStFkC-rVt2K5BYfPd0c3yFp_vHR15eRd0zJ8XQ7woBC8Vnsac6Et1pKS59pX6256DPWu8UDdEOolKAPgcd_g2NpA76cAaF_jcT80j9KrEzw8Tv0nJBGesuCjPNjGs_KzdkWTUXt23Hn9QJsdc1MZuaW0iqXBepHYfYoqNelzVte117t4BwVp0kUM6we0IqyXClaZgOI8S-WDBw2_Ovdm8e5NmhYAblEVoygcX8Y46oH6bKiaCQfKCFDMcRgChme7AoE1yZZYsPbaG_3IjPrC4LBMHQw8rM9dWjJ8ImjicvZ1pAm0dx-KHCP3y5PVKrxBDf1zSOsBRkOSjB8TPODnJMz6-jd5hTtZxpZPwPoIdCanTZ3ZD6uRBpTmDwtpRGm63UQs1m5FWPwb0T2IF0\",\n    \"p\": \"6NbkXwDWUhi-eR55Cgbf27FkQDDWIamOaDr0rj1q0f1fFEz1W5A_09YvG09Fiv1AO2-D8Rl8gS1Vkz2i0zCSqnyy8A025XOcRviOMK7nIxE4OH_PEsko8dtIrb3TmE2hUXvCkmzw9EsTF1LQBOGC6iusLTXepIC1x9ukCKFZQvdgtEObQ5kzd9Nhq-cdqmSeMVLoxPLd1blviVT9Vm8-y12CtYpeJHOaIDtVPLlBhJiBoPKWg3vxSm4XxIliNOefqegIlsmTIa3MpS6WWlCK3yHhat0Q-rRxDxdyiVdG_wzJvp0Iw_2wms7pe-PgNPYvUWH9JphWP5K38YqEBiJFXQ\",\n    \"q\": \"0A1FmpOWR91_RAWpqreWSavNaZb9nXeKiBo0DQGBz32DbqKqQ8S4aBJmbRhJcctjCLjain-ivut477tAUMmzJwVJDDq2MZFwC9Q-4VYZmFU4HJityQuSzHYe64RjN-E_NQ02TWhG3QGW6roq6c57c99rrUsETwJJiwS8M5p15Miuz53DaOjv-uqqFAFfywN5WkxHbraBcjHtMiQuyQbQqkCFh-oanHkwYNeytsNhTu2mQmwR5DR2roZ2nPiFjC6nsdk-A7E3S3wMzYYFw7jvbWWoYWo9vB40_MY2Y0FYQSqcDzcBIcq_0tnnasf3VW4Fdx6m80RzOb2Fsnln7vKXAQ\",\n    \"qi\": \"GyM_p6JrXySiz1toFgKbWV-JdI3jQ4ypu9rbMWx3rQJBfmt0FoYzgUIZEVFEcOqwemRN81zoDAaa-Bk0KWNGDjJHZDdDmFhW3AN7lI-puxk_mHZGJ11rxyR8O55XLSe3SPmRfKwZI6yU24ZxvQKFYItdldUKGzO6Ia6zTKhAVRU\",\n    \"x\": \"f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU\",\n    \"x5c\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"y\": \"x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/keys/:set/:kid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"keys",
										":set",
										":kid"
									],
									"variable": [
										{
											"key": "kid",
											"value": "sit do in dolor Ut",
											"description": "(Required) The kid of the desired key"
										},
										{
											"key": "set",
											"value": "sit do in dolor Ut",
											"description": "(Required) The set"
										}
									]
								},
								"description": "Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.\n\nA JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well."
							},
							"response": [
								{
									"name": "JSONWebKey",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"use\": \"<string>\",\n    \"kty\": \"<string>\",\n    \"kid\": \"<string>\",\n    \"alg\": \"<string>\",\n    \"crv\": \"<string>\",\n    \"d\": \"<string>\",\n    \"dp\": \"<string>\",\n    \"dq\": \"<string>\",\n    \"e\": \"<string>\",\n    \"k\": \"<string>\",\n    \"n\": \"<string>\",\n    \"p\": \"<string>\",\n    \"q\": \"<string>\",\n    \"qi\": \"<string>\",\n    \"x\": \"<string>\",\n    \"x5c\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"y\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/keys/:set/:kid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"keys",
												":set",
												":kid"
											],
											"variable": [
												{
													"key": "set"
												},
												{
													"key": "kid"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"use\": \"<string>\",\n\t\"kty\": \"<string>\",\n\t\"kid\": \"<string>\",\n\t\"alg\": \"<string>\",\n\t\"crv\": \"<string>\",\n\t\"d\": \"<string>\",\n\t\"dp\": \"<string>\",\n\t\"dq\": \"<string>\",\n\t\"e\": \"<string>\",\n\t\"k\": \"<string>\",\n\t\"n\": \"<string>\",\n\t\"p\": \"<string>\",\n\t\"q\": \"<string>\",\n\t\"qi\": \"<string>\",\n\t\"x\": \"<string>\",\n\t\"x5c\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"y\": \"<string>\"\n}"
								},
								{
									"name": "genericError",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"use\": \"<string>\",\n    \"kty\": \"<string>\",\n    \"kid\": \"<string>\",\n    \"alg\": \"<string>\",\n    \"crv\": \"<string>\",\n    \"d\": \"<string>\",\n    \"dp\": \"<string>\",\n    \"dq\": \"<string>\",\n    \"e\": \"<string>\",\n    \"k\": \"<string>\",\n    \"n\": \"<string>\",\n    \"p\": \"<string>\",\n    \"q\": \"<string>\",\n    \"qi\": \"<string>\",\n    \"x\": \"<string>\",\n    \"x5c\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"y\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/keys/:set/:kid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"keys",
												":set",
												":kid"
											],
											"variable": [
												{
													"key": "set"
												},
												{
													"key": "kid"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
								},
								{
									"name": "genericError",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"use\": \"<string>\",\n    \"kty\": \"<string>\",\n    \"kid\": \"<string>\",\n    \"alg\": \"<string>\",\n    \"crv\": \"<string>\",\n    \"d\": \"<string>\",\n    \"dp\": \"<string>\",\n    \"dq\": \"<string>\",\n    \"e\": \"<string>\",\n    \"k\": \"<string>\",\n    \"n\": \"<string>\",\n    \"p\": \"<string>\",\n    \"q\": \"<string>\",\n    \"qi\": \"<string>\",\n    \"x\": \"<string>\",\n    \"x5c\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"y\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/keys/:set/:kid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"keys",
												":set",
												":kid"
											],
											"variable": [
												{
													"key": "set"
												},
												{
													"key": "kid"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
								},
								{
									"name": "genericError",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"use\": \"<string>\",\n    \"kty\": \"<string>\",\n    \"kid\": \"<string>\",\n    \"alg\": \"<string>\",\n    \"crv\": \"<string>\",\n    \"d\": \"<string>\",\n    \"dp\": \"<string>\",\n    \"dq\": \"<string>\",\n    \"e\": \"<string>\",\n    \"k\": \"<string>\",\n    \"n\": \"<string>\",\n    \"p\": \"<string>\",\n    \"q\": \"<string>\",\n    \"qi\": \"<string>\",\n    \"x\": \"<string>\",\n    \"x5c\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"y\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/keys/:set/:kid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"keys",
												":set",
												":kid"
											],
											"variable": [
												{
													"key": "set"
												},
												{
													"key": "kid"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
								}
							]
						},
						{
							"name": "Delete a JSON Web Key",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/keys/:set/:kid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"keys",
										":set",
										":kid"
									],
									"variable": [
										{
											"key": "kid",
											"value": "sit do in dolor Ut",
											"description": "(Required) The kid of the desired key"
										},
										{
											"key": "set",
											"value": "sit do in dolor Ut",
											"description": "(Required) The set"
										}
									]
								},
								"description": "Use this endpoint to delete a single JSON Web Key.\n\nA JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well."
							},
							"response": [
								{
									"name": "Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\ntypically 201.",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/keys/:set/:kid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"keys",
												":set",
												":kid"
											],
											"variable": [
												{
													"key": "set"
												},
												{
													"key": "kid"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "genericError",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/keys/:set/:kid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"keys",
												":set",
												":kid"
											],
											"variable": [
												{
													"key": "set"
												},
												{
													"key": "kid"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
								},
								{
									"name": "genericError",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/keys/:set/:kid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"keys",
												":set",
												":kid"
											],
											"variable": [
												{
													"key": "set"
												},
												{
													"key": "kid"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
								},
								{
									"name": "genericError",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/keys/:set/:kid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"keys",
												":set",
												":kid"
											],
											"variable": [
												{
													"key": "set"
												},
												{
													"key": "kid"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Retrieve a JSON Web Key Set",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/keys/:set",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"keys",
								":set"
							],
							"variable": [
								{
									"key": "set",
									"value": "sit do in dolor Ut",
									"description": "(Required) The set"
								}
							]
						},
						"description": "This endpoint can be used to retrieve JWK Sets stored in ORY Hydra.\n\nA JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well."
					},
					"response": [
						{
							"name": "JSONWebKeySet",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/keys/:set",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"keys",
										":set"
									],
									"variable": [
										{
											"key": "set"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"keys\": [\n\t\t{\n\t\t\t\"use\": \"<string>\",\n\t\t\t\"kty\": \"<string>\",\n\t\t\t\"kid\": \"<string>\",\n\t\t\t\"alg\": \"<string>\",\n\t\t\t\"crv\": \"<string>\",\n\t\t\t\"d\": \"<string>\",\n\t\t\t\"dp\": \"<string>\",\n\t\t\t\"dq\": \"<string>\",\n\t\t\t\"e\": \"<string>\",\n\t\t\t\"k\": \"<string>\",\n\t\t\t\"n\": \"<string>\",\n\t\t\t\"p\": \"<string>\",\n\t\t\t\"q\": \"<string>\",\n\t\t\t\"qi\": \"<string>\",\n\t\t\t\"x\": \"<string>\",\n\t\t\t\"x5c\": [\n\t\t\t\t\"<string>\",\n\t\t\t\t\"<string>\"\n\t\t\t],\n\t\t\t\"y\": \"<string>\"\n\t\t},\n\t\t{\n\t\t\t\"use\": \"<string>\",\n\t\t\t\"kty\": \"<string>\",\n\t\t\t\"kid\": \"<string>\",\n\t\t\t\"alg\": \"<string>\",\n\t\t\t\"crv\": \"<string>\",\n\t\t\t\"d\": \"<string>\",\n\t\t\t\"dp\": \"<string>\",\n\t\t\t\"dq\": \"<string>\",\n\t\t\t\"e\": \"<string>\",\n\t\t\t\"k\": \"<string>\",\n\t\t\t\"n\": \"<string>\",\n\t\t\t\"p\": \"<string>\",\n\t\t\t\"q\": \"<string>\",\n\t\t\t\"qi\": \"<string>\",\n\t\t\t\"x\": \"<string>\",\n\t\t\t\"x5c\": [\n\t\t\t\t\"<string>\",\n\t\t\t\t\"<string>\"\n\t\t\t],\n\t\t\t\"y\": \"<string>\"\n\t\t}\n\t]\n}"
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/keys/:set",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"keys",
										":set"
									],
									"variable": [
										{
											"key": "set"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/keys/:set",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"keys",
										":set"
									],
									"variable": [
										{
											"key": "set"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/keys/:set",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"keys",
										":set"
									],
									"variable": [
										{
											"key": "set"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						}
					]
				},
				{
					"name": "Update a JSON Web Key Set",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"keys\": [\n        {\n            \"use\": \"sig\",\n            \"kty\": \"RSA\",\n            \"kid\": \"1603dfe0af8f4596\",\n            \"alg\": \"RS256\",\n            \"crv\": \"P-256\",\n            \"d\": \"T_N8I-6He3M8a7X1vWt6TGIx4xB_GP3Mb4SsZSA4v-orvJzzRiQhLlRR81naWYxfQAYt5isDI6_C2L9bdWo4FFPjGQFvNoRX-_sBJyBI_rl-TBgsZYoUlAj3J92WmY2inbA-PwyJfsaIIDceYBC-eX-xiCu6qMqkZi3MwQAFL6bMdPEM0z4JBcwFT3VdiWAIRUuACWQwrXMq672x7fMuaIaHi7XDGgt1ith23CLfaREmJku9PQcchbt_uEY-hqrFY6ntTtS4paWWQj86xLL94S-Tf6v6xkL918PfLSOTq6XCzxvlFwzBJqApnAhbwqLjpPhgUG04EDRrqrSBc5Y1BLevn6Ip5h1AhessBp3wLkQgz_roeckt-ybvzKTjESMuagnpqLvOT7Y9veIug2MwPJZI2VjczRc1vzMs25XrFQ8DpUy-bNdp89TmvAXwctUMiJdgHloJw23Cv03gIUAkDnsTqZmkpbIf-crpgNKFmQP_EDKoe8p_PXZZgfbRri3NoEVGP7Mk6yEu8LjJhClhZaBNjuWw2-KlBfOA3g79mhfBnkInee5KO9mGR50qPk1V-MorUYNTFMZIm0kFE6eYVWFBwJHLKYhHU34DoiK1VP-svZpC2uAMFNA_UJEwM9CQ2b8qe4-5e9aywMvwcuArRkAB5mBIfOaOJao3mfukKAE\",\n            \"dp\": \"G4sPXkc6Ya9y8oJW9_ILj4xuppu0lzi_H7VTkS8xj5SdX3coE0oimYwxIi2emTAue0UOa5dpgFGyBJ4c8tQ2VF402XRugKDTP8akYhFo5tAA77Qe_NmtuYZc3C3m3I24G2GvR5sSDxUyAN2zq8Lfn9EUms6rY3Ob8YeiKkTiBj0\",\n            \"dq\": \"s9lAH9fggBsoFR8Oac2R_E2gw282rT2kGOAhvIllETE1efrA6huUUvMfBcMpn8lqeW6vzznYY5SSQF7pMdC_agI3nG8Ibp1BUb0JUiraRNqUfLhcQb_d9GF4Dh7e74WbRsobRonujTYN1xCaP6TO61jvWrX-L18txXw494Q_cgk\",\n            \"e\": \"AQAB\",\n            \"k\": \"GawgguFyGrWKav7AX4VKUg\",\n            \"n\": \"vTqrxUyQPl_20aqf5kXHwDZrel-KovIp8s7ewJod2EXHl8tWlRB3_Rem34KwBfqlKQGp1nqah-51H4Jzruqe0cFP58hPEIt6WqrvnmJCXxnNuIB53iX_uUUXXHDHBeaPCSRoNJzNysjoJ30TIUsKBiirhBa7f235PXbKiHducLevV6PcKxJ5cY8zO286qJLBWSPm-OIevwqsIsSIH44Qtm9sioFikhkbLwoqwWORGAY0nl6XvVOlhADdLjBSqSAeT1FPuCDCnXwzCDR8N9IFB_IjdStFkC-rVt2K5BYfPd0c3yFp_vHR15eRd0zJ8XQ7woBC8Vnsac6Et1pKS59pX6256DPWu8UDdEOolKAPgcd_g2NpA76cAaF_jcT80j9KrEzw8Tv0nJBGesuCjPNjGs_KzdkWTUXt23Hn9QJsdc1MZuaW0iqXBepHYfYoqNelzVte117t4BwVp0kUM6we0IqyXClaZgOI8S-WDBw2_Ovdm8e5NmhYAblEVoygcX8Y46oH6bKiaCQfKCFDMcRgChme7AoE1yZZYsPbaG_3IjPrC4LBMHQw8rM9dWjJ8ImjicvZ1pAm0dx-KHCP3y5PVKrxBDf1zSOsBRkOSjB8TPODnJMz6-jd5hTtZxpZPwPoIdCanTZ3ZD6uRBpTmDwtpRGm63UQs1m5FWPwb0T2IF0\",\n            \"p\": \"6NbkXwDWUhi-eR55Cgbf27FkQDDWIamOaDr0rj1q0f1fFEz1W5A_09YvG09Fiv1AO2-D8Rl8gS1Vkz2i0zCSqnyy8A025XOcRviOMK7nIxE4OH_PEsko8dtIrb3TmE2hUXvCkmzw9EsTF1LQBOGC6iusLTXepIC1x9ukCKFZQvdgtEObQ5kzd9Nhq-cdqmSeMVLoxPLd1blviVT9Vm8-y12CtYpeJHOaIDtVPLlBhJiBoPKWg3vxSm4XxIliNOefqegIlsmTIa3MpS6WWlCK3yHhat0Q-rRxDxdyiVdG_wzJvp0Iw_2wms7pe-PgNPYvUWH9JphWP5K38YqEBiJFXQ\",\n            \"q\": \"0A1FmpOWR91_RAWpqreWSavNaZb9nXeKiBo0DQGBz32DbqKqQ8S4aBJmbRhJcctjCLjain-ivut477tAUMmzJwVJDDq2MZFwC9Q-4VYZmFU4HJityQuSzHYe64RjN-E_NQ02TWhG3QGW6roq6c57c99rrUsETwJJiwS8M5p15Miuz53DaOjv-uqqFAFfywN5WkxHbraBcjHtMiQuyQbQqkCFh-oanHkwYNeytsNhTu2mQmwR5DR2roZ2nPiFjC6nsdk-A7E3S3wMzYYFw7jvbWWoYWo9vB40_MY2Y0FYQSqcDzcBIcq_0tnnasf3VW4Fdx6m80RzOb2Fsnln7vKXAQ\",\n            \"qi\": \"GyM_p6JrXySiz1toFgKbWV-JdI3jQ4ypu9rbMWx3rQJBfmt0FoYzgUIZEVFEcOqwemRN81zoDAaa-Bk0KWNGDjJHZDdDmFhW3AN7lI-puxk_mHZGJ11rxyR8O55XLSe3SPmRfKwZI6yU24ZxvQKFYItdldUKGzO6Ia6zTKhAVRU\",\n            \"x\": \"f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU\",\n            \"x5c\": [\n                \"<string>\",\n                \"<string>\"\n            ],\n            \"y\": \"x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0\"\n        },\n        {\n            \"use\": \"sig\",\n            \"kty\": \"RSA\",\n            \"kid\": \"1603dfe0af8f4596\",\n            \"alg\": \"RS256\",\n            \"crv\": \"P-256\",\n            \"d\": \"T_N8I-6He3M8a7X1vWt6TGIx4xB_GP3Mb4SsZSA4v-orvJzzRiQhLlRR81naWYxfQAYt5isDI6_C2L9bdWo4FFPjGQFvNoRX-_sBJyBI_rl-TBgsZYoUlAj3J92WmY2inbA-PwyJfsaIIDceYBC-eX-xiCu6qMqkZi3MwQAFL6bMdPEM0z4JBcwFT3VdiWAIRUuACWQwrXMq672x7fMuaIaHi7XDGgt1ith23CLfaREmJku9PQcchbt_uEY-hqrFY6ntTtS4paWWQj86xLL94S-Tf6v6xkL918PfLSOTq6XCzxvlFwzBJqApnAhbwqLjpPhgUG04EDRrqrSBc5Y1BLevn6Ip5h1AhessBp3wLkQgz_roeckt-ybvzKTjESMuagnpqLvOT7Y9veIug2MwPJZI2VjczRc1vzMs25XrFQ8DpUy-bNdp89TmvAXwctUMiJdgHloJw23Cv03gIUAkDnsTqZmkpbIf-crpgNKFmQP_EDKoe8p_PXZZgfbRri3NoEVGP7Mk6yEu8LjJhClhZaBNjuWw2-KlBfOA3g79mhfBnkInee5KO9mGR50qPk1V-MorUYNTFMZIm0kFE6eYVWFBwJHLKYhHU34DoiK1VP-svZpC2uAMFNA_UJEwM9CQ2b8qe4-5e9aywMvwcuArRkAB5mBIfOaOJao3mfukKAE\",\n            \"dp\": \"G4sPXkc6Ya9y8oJW9_ILj4xuppu0lzi_H7VTkS8xj5SdX3coE0oimYwxIi2emTAue0UOa5dpgFGyBJ4c8tQ2VF402XRugKDTP8akYhFo5tAA77Qe_NmtuYZc3C3m3I24G2GvR5sSDxUyAN2zq8Lfn9EUms6rY3Ob8YeiKkTiBj0\",\n            \"dq\": \"s9lAH9fggBsoFR8Oac2R_E2gw282rT2kGOAhvIllETE1efrA6huUUvMfBcMpn8lqeW6vzznYY5SSQF7pMdC_agI3nG8Ibp1BUb0JUiraRNqUfLhcQb_d9GF4Dh7e74WbRsobRonujTYN1xCaP6TO61jvWrX-L18txXw494Q_cgk\",\n            \"e\": \"AQAB\",\n            \"k\": \"GawgguFyGrWKav7AX4VKUg\",\n            \"n\": \"vTqrxUyQPl_20aqf5kXHwDZrel-KovIp8s7ewJod2EXHl8tWlRB3_Rem34KwBfqlKQGp1nqah-51H4Jzruqe0cFP58hPEIt6WqrvnmJCXxnNuIB53iX_uUUXXHDHBeaPCSRoNJzNysjoJ30TIUsKBiirhBa7f235PXbKiHducLevV6PcKxJ5cY8zO286qJLBWSPm-OIevwqsIsSIH44Qtm9sioFikhkbLwoqwWORGAY0nl6XvVOlhADdLjBSqSAeT1FPuCDCnXwzCDR8N9IFB_IjdStFkC-rVt2K5BYfPd0c3yFp_vHR15eRd0zJ8XQ7woBC8Vnsac6Et1pKS59pX6256DPWu8UDdEOolKAPgcd_g2NpA76cAaF_jcT80j9KrEzw8Tv0nJBGesuCjPNjGs_KzdkWTUXt23Hn9QJsdc1MZuaW0iqXBepHYfYoqNelzVte117t4BwVp0kUM6we0IqyXClaZgOI8S-WDBw2_Ovdm8e5NmhYAblEVoygcX8Y46oH6bKiaCQfKCFDMcRgChme7AoE1yZZYsPbaG_3IjPrC4LBMHQw8rM9dWjJ8ImjicvZ1pAm0dx-KHCP3y5PVKrxBDf1zSOsBRkOSjB8TPODnJMz6-jd5hTtZxpZPwPoIdCanTZ3ZD6uRBpTmDwtpRGm63UQs1m5FWPwb0T2IF0\",\n            \"p\": \"6NbkXwDWUhi-eR55Cgbf27FkQDDWIamOaDr0rj1q0f1fFEz1W5A_09YvG09Fiv1AO2-D8Rl8gS1Vkz2i0zCSqnyy8A025XOcRviOMK7nIxE4OH_PEsko8dtIrb3TmE2hUXvCkmzw9EsTF1LQBOGC6iusLTXepIC1x9ukCKFZQvdgtEObQ5kzd9Nhq-cdqmSeMVLoxPLd1blviVT9Vm8-y12CtYpeJHOaIDtVPLlBhJiBoPKWg3vxSm4XxIliNOefqegIlsmTIa3MpS6WWlCK3yHhat0Q-rRxDxdyiVdG_wzJvp0Iw_2wms7pe-PgNPYvUWH9JphWP5K38YqEBiJFXQ\",\n            \"q\": \"0A1FmpOWR91_RAWpqreWSavNaZb9nXeKiBo0DQGBz32DbqKqQ8S4aBJmbRhJcctjCLjain-ivut477tAUMmzJwVJDDq2MZFwC9Q-4VYZmFU4HJityQuSzHYe64RjN-E_NQ02TWhG3QGW6roq6c57c99rrUsETwJJiwS8M5p15Miuz53DaOjv-uqqFAFfywN5WkxHbraBcjHtMiQuyQbQqkCFh-oanHkwYNeytsNhTu2mQmwR5DR2roZ2nPiFjC6nsdk-A7E3S3wMzYYFw7jvbWWoYWo9vB40_MY2Y0FYQSqcDzcBIcq_0tnnasf3VW4Fdx6m80RzOb2Fsnln7vKXAQ\",\n            \"qi\": \"GyM_p6JrXySiz1toFgKbWV-JdI3jQ4ypu9rbMWx3rQJBfmt0FoYzgUIZEVFEcOqwemRN81zoDAaa-Bk0KWNGDjJHZDdDmFhW3AN7lI-puxk_mHZGJ11rxyR8O55XLSe3SPmRfKwZI6yU24ZxvQKFYItdldUKGzO6Ia6zTKhAVRU\",\n            \"x\": \"f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU\",\n            \"x5c\": [\n                \"<string>\",\n                \"<string>\"\n            ],\n            \"y\": \"x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/keys/:set",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"keys",
								":set"
							],
							"variable": [
								{
									"key": "set",
									"value": "sit do in dolor Ut",
									"description": "(Required) The set"
								}
							]
						},
						"description": "Use this method if you do not want to let Hydra generate the JWKs for you, but instead save your own.\n\nA JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well."
					},
					"response": [
						{
							"name": "JSONWebKeySet",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keys\": [\n        {\n            \"use\": \"<string>\",\n            \"kty\": \"<string>\",\n            \"kid\": \"<string>\",\n            \"alg\": \"<string>\",\n            \"crv\": \"<string>\",\n            \"d\": \"<string>\",\n            \"dp\": \"<string>\",\n            \"dq\": \"<string>\",\n            \"e\": \"<string>\",\n            \"k\": \"<string>\",\n            \"n\": \"<string>\",\n            \"p\": \"<string>\",\n            \"q\": \"<string>\",\n            \"qi\": \"<string>\",\n            \"x\": \"<string>\",\n            \"x5c\": [\n                \"<string>\",\n                \"<string>\"\n            ],\n            \"y\": \"<string>\"\n        },\n        {\n            \"use\": \"<string>\",\n            \"kty\": \"<string>\",\n            \"kid\": \"<string>\",\n            \"alg\": \"<string>\",\n            \"crv\": \"<string>\",\n            \"d\": \"<string>\",\n            \"dp\": \"<string>\",\n            \"dq\": \"<string>\",\n            \"e\": \"<string>\",\n            \"k\": \"<string>\",\n            \"n\": \"<string>\",\n            \"p\": \"<string>\",\n            \"q\": \"<string>\",\n            \"qi\": \"<string>\",\n            \"x\": \"<string>\",\n            \"x5c\": [\n                \"<string>\",\n                \"<string>\"\n            ],\n            \"y\": \"<string>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/keys/:set",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"keys",
										":set"
									],
									"variable": [
										{
											"key": "set"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"keys\": [\n\t\t{\n\t\t\t\"use\": \"<string>\",\n\t\t\t\"kty\": \"<string>\",\n\t\t\t\"kid\": \"<string>\",\n\t\t\t\"alg\": \"<string>\",\n\t\t\t\"crv\": \"<string>\",\n\t\t\t\"d\": \"<string>\",\n\t\t\t\"dp\": \"<string>\",\n\t\t\t\"dq\": \"<string>\",\n\t\t\t\"e\": \"<string>\",\n\t\t\t\"k\": \"<string>\",\n\t\t\t\"n\": \"<string>\",\n\t\t\t\"p\": \"<string>\",\n\t\t\t\"q\": \"<string>\",\n\t\t\t\"qi\": \"<string>\",\n\t\t\t\"x\": \"<string>\",\n\t\t\t\"x5c\": [\n\t\t\t\t\"<string>\",\n\t\t\t\t\"<string>\"\n\t\t\t],\n\t\t\t\"y\": \"<string>\"\n\t\t},\n\t\t{\n\t\t\t\"use\": \"<string>\",\n\t\t\t\"kty\": \"<string>\",\n\t\t\t\"kid\": \"<string>\",\n\t\t\t\"alg\": \"<string>\",\n\t\t\t\"crv\": \"<string>\",\n\t\t\t\"d\": \"<string>\",\n\t\t\t\"dp\": \"<string>\",\n\t\t\t\"dq\": \"<string>\",\n\t\t\t\"e\": \"<string>\",\n\t\t\t\"k\": \"<string>\",\n\t\t\t\"n\": \"<string>\",\n\t\t\t\"p\": \"<string>\",\n\t\t\t\"q\": \"<string>\",\n\t\t\t\"qi\": \"<string>\",\n\t\t\t\"x\": \"<string>\",\n\t\t\t\"x5c\": [\n\t\t\t\t\"<string>\",\n\t\t\t\t\"<string>\"\n\t\t\t],\n\t\t\t\"y\": \"<string>\"\n\t\t}\n\t]\n}"
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keys\": [\n        {\n            \"use\": \"<string>\",\n            \"kty\": \"<string>\",\n            \"kid\": \"<string>\",\n            \"alg\": \"<string>\",\n            \"crv\": \"<string>\",\n            \"d\": \"<string>\",\n            \"dp\": \"<string>\",\n            \"dq\": \"<string>\",\n            \"e\": \"<string>\",\n            \"k\": \"<string>\",\n            \"n\": \"<string>\",\n            \"p\": \"<string>\",\n            \"q\": \"<string>\",\n            \"qi\": \"<string>\",\n            \"x\": \"<string>\",\n            \"x5c\": [\n                \"<string>\",\n                \"<string>\"\n            ],\n            \"y\": \"<string>\"\n        },\n        {\n            \"use\": \"<string>\",\n            \"kty\": \"<string>\",\n            \"kid\": \"<string>\",\n            \"alg\": \"<string>\",\n            \"crv\": \"<string>\",\n            \"d\": \"<string>\",\n            \"dp\": \"<string>\",\n            \"dq\": \"<string>\",\n            \"e\": \"<string>\",\n            \"k\": \"<string>\",\n            \"n\": \"<string>\",\n            \"p\": \"<string>\",\n            \"q\": \"<string>\",\n            \"qi\": \"<string>\",\n            \"x\": \"<string>\",\n            \"x5c\": [\n                \"<string>\",\n                \"<string>\"\n            ],\n            \"y\": \"<string>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/keys/:set",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"keys",
										":set"
									],
									"variable": [
										{
											"key": "set"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keys\": [\n        {\n            \"use\": \"<string>\",\n            \"kty\": \"<string>\",\n            \"kid\": \"<string>\",\n            \"alg\": \"<string>\",\n            \"crv\": \"<string>\",\n            \"d\": \"<string>\",\n            \"dp\": \"<string>\",\n            \"dq\": \"<string>\",\n            \"e\": \"<string>\",\n            \"k\": \"<string>\",\n            \"n\": \"<string>\",\n            \"p\": \"<string>\",\n            \"q\": \"<string>\",\n            \"qi\": \"<string>\",\n            \"x\": \"<string>\",\n            \"x5c\": [\n                \"<string>\",\n                \"<string>\"\n            ],\n            \"y\": \"<string>\"\n        },\n        {\n            \"use\": \"<string>\",\n            \"kty\": \"<string>\",\n            \"kid\": \"<string>\",\n            \"alg\": \"<string>\",\n            \"crv\": \"<string>\",\n            \"d\": \"<string>\",\n            \"dp\": \"<string>\",\n            \"dq\": \"<string>\",\n            \"e\": \"<string>\",\n            \"k\": \"<string>\",\n            \"n\": \"<string>\",\n            \"p\": \"<string>\",\n            \"q\": \"<string>\",\n            \"qi\": \"<string>\",\n            \"x\": \"<string>\",\n            \"x5c\": [\n                \"<string>\",\n                \"<string>\"\n            ],\n            \"y\": \"<string>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/keys/:set",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"keys",
										":set"
									],
									"variable": [
										{
											"key": "set"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keys\": [\n        {\n            \"use\": \"<string>\",\n            \"kty\": \"<string>\",\n            \"kid\": \"<string>\",\n            \"alg\": \"<string>\",\n            \"crv\": \"<string>\",\n            \"d\": \"<string>\",\n            \"dp\": \"<string>\",\n            \"dq\": \"<string>\",\n            \"e\": \"<string>\",\n            \"k\": \"<string>\",\n            \"n\": \"<string>\",\n            \"p\": \"<string>\",\n            \"q\": \"<string>\",\n            \"qi\": \"<string>\",\n            \"x\": \"<string>\",\n            \"x5c\": [\n                \"<string>\",\n                \"<string>\"\n            ],\n            \"y\": \"<string>\"\n        },\n        {\n            \"use\": \"<string>\",\n            \"kty\": \"<string>\",\n            \"kid\": \"<string>\",\n            \"alg\": \"<string>\",\n            \"crv\": \"<string>\",\n            \"d\": \"<string>\",\n            \"dp\": \"<string>\",\n            \"dq\": \"<string>\",\n            \"e\": \"<string>\",\n            \"k\": \"<string>\",\n            \"n\": \"<string>\",\n            \"p\": \"<string>\",\n            \"q\": \"<string>\",\n            \"qi\": \"<string>\",\n            \"x\": \"<string>\",\n            \"x5c\": [\n                \"<string>\",\n                \"<string>\"\n            ],\n            \"y\": \"<string>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/keys/:set",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"keys",
										":set"
									],
									"variable": [
										{
											"key": "set"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						}
					]
				},
				{
					"name": "Generate a New JSON Web Key",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"alg\": \"officia et deserunt qui\",\n    \"use\": \"eiusmod ut velit commodo\",\n    \"kid\": \"aliqua minim in\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/keys/:set",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"keys",
								":set"
							],
							"variable": [
								{
									"key": "set",
									"value": "sit do in dolor Ut",
									"description": "(Required) The set"
								}
							]
						},
						"description": "This endpoint is capable of generating JSON Web Key Sets for you. There a different strategies available, such as symmetric cryptographic keys (HS256, HS512) and asymetric cryptographic keys (RS256, ECDSA). If the specified JSON Web Key Set does not exist, it will be created.\n\nA JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well."
					},
					"response": [
						{
							"name": "JSONWebKeySet",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"alg\": \"<string>\",\n    \"use\": \"<string>\",\n    \"kid\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/keys/:set",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"keys",
										":set"
									],
									"variable": [
										{
											"key": "set"
										}
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"keys\": [\n\t\t{\n\t\t\t\"use\": \"<string>\",\n\t\t\t\"kty\": \"<string>\",\n\t\t\t\"kid\": \"<string>\",\n\t\t\t\"alg\": \"<string>\",\n\t\t\t\"crv\": \"<string>\",\n\t\t\t\"d\": \"<string>\",\n\t\t\t\"dp\": \"<string>\",\n\t\t\t\"dq\": \"<string>\",\n\t\t\t\"e\": \"<string>\",\n\t\t\t\"k\": \"<string>\",\n\t\t\t\"n\": \"<string>\",\n\t\t\t\"p\": \"<string>\",\n\t\t\t\"q\": \"<string>\",\n\t\t\t\"qi\": \"<string>\",\n\t\t\t\"x\": \"<string>\",\n\t\t\t\"x5c\": [\n\t\t\t\t\"<string>\",\n\t\t\t\t\"<string>\"\n\t\t\t],\n\t\t\t\"y\": \"<string>\"\n\t\t},\n\t\t{\n\t\t\t\"use\": \"<string>\",\n\t\t\t\"kty\": \"<string>\",\n\t\t\t\"kid\": \"<string>\",\n\t\t\t\"alg\": \"<string>\",\n\t\t\t\"crv\": \"<string>\",\n\t\t\t\"d\": \"<string>\",\n\t\t\t\"dp\": \"<string>\",\n\t\t\t\"dq\": \"<string>\",\n\t\t\t\"e\": \"<string>\",\n\t\t\t\"k\": \"<string>\",\n\t\t\t\"n\": \"<string>\",\n\t\t\t\"p\": \"<string>\",\n\t\t\t\"q\": \"<string>\",\n\t\t\t\"qi\": \"<string>\",\n\t\t\t\"x\": \"<string>\",\n\t\t\t\"x5c\": [\n\t\t\t\t\"<string>\",\n\t\t\t\t\"<string>\"\n\t\t\t],\n\t\t\t\"y\": \"<string>\"\n\t\t}\n\t]\n}"
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"alg\": \"<string>\",\n    \"use\": \"<string>\",\n    \"kid\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/keys/:set",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"keys",
										":set"
									],
									"variable": [
										{
											"key": "set"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"alg\": \"<string>\",\n    \"use\": \"<string>\",\n    \"kid\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/keys/:set",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"keys",
										":set"
									],
									"variable": [
										{
											"key": "set"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"alg\": \"<string>\",\n    \"use\": \"<string>\",\n    \"kid\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/keys/:set",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"keys",
										":set"
									],
									"variable": [
										{
											"key": "set"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						}
					]
				},
				{
					"name": "Delete a JSON Web Key Set",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/keys/:set",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"keys",
								":set"
							],
							"variable": [
								{
									"key": "set",
									"value": "sit do in dolor Ut",
									"description": "(Required) The set"
								}
							]
						},
						"description": "Use this endpoint to delete a complete JSON Web Key Set and all the keys in that set.\n\nA JSON Web Key (JWK) is a JavaScript Object Notation (JSON) data structure that represents a cryptographic key. A JWK Set is a JSON data structure that represents a set of JWKs. A JSON Web Key is identified by its set and key id. ORY Hydra uses this functionality to store cryptographic keys used for TLS and JSON Web Tokens (such as OpenID Connect ID tokens), and allows storing user-defined keys as well."
					},
					"response": [
						{
							"name": "Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\ntypically 201.",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/keys/:set",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"keys",
										":set"
									],
									"variable": [
										{
											"key": "set"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/keys/:set",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"keys",
										":set"
									],
									"variable": [
										{
											"key": "set"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/keys/:set",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"keys",
										":set"
									],
									"variable": [
										{
											"key": "set"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/keys/:set",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"keys",
										":set"
									],
									"variable": [
										{
											"key": "set"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "oauth2",
			"item": [
				{
					"name": "auth",
					"item": [
						{
							"name": "requests",
							"item": [
								{
									"name": "consent",
									"item": [
										{
											"name": "Get Consent Request Information",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/oauth2/auth/requests/consent?consent_challenge=sit do in dolor Ut",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"oauth2",
														"auth",
														"requests",
														"consent"
													],
													"query": [
														{
															"key": "consent_challenge",
															"value": "sit do in dolor Ut",
															"description": "(Required) "
														}
													]
												},
												"description": "When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider\nto authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if\nthe OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject's behalf.\n\nThe consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to\ngrant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").\n\nThe consent challenge is appended to the consent provider's URL to which the subject's user-agent (browser) is redirected to. The consent\nprovider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted\nor rejected the request."
											},
											"response": [
												{
													"name": "consentRequest",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/consent?consent_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"consent"
															],
															"query": [
																{
																	"key": "consent_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"challenge\": \"<string>\",\n\t\"acr\": \"<string>\",\n\t\"client\": {\n\t\t\"allowed_cors_origins\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"audience\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"backchannel_logout_session_required\": \"<boolean>\",\n\t\t\"backchannel_logout_uri\": \"<string>\",\n\t\t\"client_id\": \"<string>\",\n\t\t\"client_name\": \"<string>\",\n\t\t\"client_secret\": \"<string>\",\n\t\t\"client_secret_expires_at\": \"<long>\",\n\t\t\"client_uri\": \"<string>\",\n\t\t\"contacts\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"created_at\": \"<dateTime>\",\n\t\t\"frontchannel_logout_session_required\": \"<boolean>\",\n\t\t\"frontchannel_logout_uri\": \"<string>\",\n\t\t\"grant_types\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"jwks\": \"<object>\",\n\t\t\"jwks_uri\": \"<string>\",\n\t\t\"logo_uri\": \"<string>\",\n\t\t\"metadata\": \"<object>\",\n\t\t\"owner\": \"<string>\",\n\t\t\"policy_uri\": \"<string>\",\n\t\t\"post_logout_redirect_uris\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"redirect_uris\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"request_object_signing_alg\": \"<string>\",\n\t\t\"request_uris\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"response_types\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"scope\": \"<string>\",\n\t\t\"sector_identifier_uri\": \"<string>\",\n\t\t\"subject_type\": \"<string>\",\n\t\t\"token_endpoint_auth_method\": \"<string>\",\n\t\t\"token_endpoint_auth_signing_alg\": \"<string>\",\n\t\t\"tos_uri\": \"<string>\",\n\t\t\"updated_at\": \"<dateTime>\",\n\t\t\"userinfo_signed_response_alg\": \"<string>\"\n\t},\n\t\"context\": \"<object>\",\n\t\"login_challenge\": \"<string>\",\n\t\"login_session_id\": \"<string>\",\n\t\"oidc_context\": {\n\t\t\"acr_values\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"display\": \"<string>\",\n\t\t\"id_token_hint_claims\": \"<object>\",\n\t\t\"login_hint\": \"<string>\",\n\t\t\"ui_locales\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t]\n\t},\n\t\"request_url\": \"<string>\",\n\t\"requested_access_token_audience\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"requested_scope\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"skip\": \"<boolean>\",\n\t\"subject\": \"<string>\"\n}"
												},
												{
													"name": "genericError",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/consent?consent_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"consent"
															],
															"query": [
																{
																	"key": "consent_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
												},
												{
													"name": "requestWasHandledResponse",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/consent?consent_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"consent"
															],
															"query": [
																{
																	"key": "consent_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Gone",
													"code": 410,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"redirect_to\": \"<string>\"\n}"
												},
												{
													"name": "genericError",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/consent?consent_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"consent"
															],
															"query": [
																{
																	"key": "consent_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
												}
											]
										},
										{
											"name": "Accept a Consent Request",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"grant_access_token_audience\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"grant_scope\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"handled_at\": \"2019-04-16T04:45:05.685Z\",\n    \"remember\": true,\n    \"remember_for\": -72766940,\n    \"session\": {\n        \"access_token\": {},\n        \"id_token\": {}\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/oauth2/auth/requests/consent/accept?consent_challenge=sit do in dolor Ut",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"oauth2",
														"auth",
														"requests",
														"consent",
														"accept"
													],
													"query": [
														{
															"key": "consent_challenge",
															"value": "sit do in dolor Ut",
															"description": "(Required) "
														}
													]
												},
												"description": "When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider\nto authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if\nthe OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject's behalf.\n\nThe consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to\ngrant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").\n\nThe consent challenge is appended to the consent provider's URL to which the subject's user-agent (browser) is redirected to. The consent\nprovider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted\nor rejected the request.\n\nThis endpoint tells ORY Hydra that the subject has authorized the OAuth 2.0 client to access resources on his/her behalf.\nThe consent provider includes additional information, such as session data for access and ID tokens, and if the\nconsent request should be used as basis for future requests.\n\nThe response contains a redirect URL which the consent provider should redirect the user-agent to."
											},
											"response": [
												{
													"name": "completedRequest",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"grant_access_token_audience\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"grant_scope\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"handled_at\": \"1953-03-18T09:28:16.784Z\",\n    \"remember\": \"<boolean>\",\n    \"remember_for\": \"<integer>\",\n    \"session\": {\n        \"access_token\": {},\n        \"id_token\": {}\n    }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/consent/accept?consent_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"consent",
																"accept"
															],
															"query": [
																{
																	"key": "consent_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"redirect_to\": \"<string>\"\n}"
												},
												{
													"name": "genericError",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"grant_access_token_audience\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"grant_scope\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"handled_at\": \"1953-03-18T09:28:16.784Z\",\n    \"remember\": \"<boolean>\",\n    \"remember_for\": \"<integer>\",\n    \"session\": {\n        \"access_token\": {},\n        \"id_token\": {}\n    }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/consent/accept?consent_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"consent",
																"accept"
															],
															"query": [
																{
																	"key": "consent_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
												},
												{
													"name": "genericError",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"grant_access_token_audience\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"grant_scope\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"handled_at\": \"1953-03-18T09:28:16.784Z\",\n    \"remember\": \"<boolean>\",\n    \"remember_for\": \"<integer>\",\n    \"session\": {\n        \"access_token\": {},\n        \"id_token\": {}\n    }\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/consent/accept?consent_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"consent",
																"accept"
															],
															"query": [
																{
																	"key": "consent_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
												}
											]
										},
										{
											"name": "Reject a Consent Request",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"error\": \"aliqua proident sit nisi\",\n    \"error_debug\": \"fugiat voluptate sit exercitation\",\n    \"error_description\": \"ea aute Ut\",\n    \"error_hint\": \"irure exercita\",\n    \"status_code\": 56601529\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/oauth2/auth/requests/consent/reject?consent_challenge=sit do in dolor Ut",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"oauth2",
														"auth",
														"requests",
														"consent",
														"reject"
													],
													"query": [
														{
															"key": "consent_challenge",
															"value": "sit do in dolor Ut",
															"description": "(Required) "
														}
													]
												},
												"description": "When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider\nto authenticate the subject and then tell ORY Hydra now about it. If the subject authenticated, he/she must now be asked if\nthe OAuth 2.0 Client which initiated the flow should be allowed to access the resources on the subject's behalf.\n\nThe consent provider which handles this request and is a web app implemented and hosted by you. It shows a subject interface which asks the subject to\ngrant or deny the client access to the requested scope (\"Application my-dropbox-app wants write access to all your private files\").\n\nThe consent challenge is appended to the consent provider's URL to which the subject's user-agent (browser) is redirected to. The consent\nprovider uses that challenge to fetch information on the OAuth2 request and then tells ORY Hydra if the subject accepted\nor rejected the request.\n\nThis endpoint tells ORY Hydra that the subject has not authorized the OAuth 2.0 client to access resources on his/her behalf.\nThe consent provider must include a reason why the consent was not granted.\n\nThe response contains a redirect URL which the consent provider should redirect the user-agent to."
											},
											"response": [
												{
													"name": "completedRequest",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/consent/reject?consent_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"consent",
																"reject"
															],
															"query": [
																{
																	"key": "consent_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"redirect_to\": \"<string>\"\n}"
												},
												{
													"name": "genericError",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/consent/reject?consent_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"consent",
																"reject"
															],
															"query": [
																{
																	"key": "consent_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
												},
												{
													"name": "genericError",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/consent/reject?consent_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"consent",
																"reject"
															],
															"query": [
																{
																	"key": "consent_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "login",
									"item": [
										{
											"name": "Get a Login Request",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/oauth2/auth/requests/login?login_challenge=66acbb937bf64930b7975cc6b572bf49",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"oauth2",
														"auth",
														"requests",
														"login"
													],
													"query": [
														{
															"key": "login_challenge",
															"value": "66acbb937bf64930b7975cc6b572bf49",
															"description": "(Required) "
														}
													]
												},
												"description": "When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider\n(sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login\nprovider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\")\na subject (in OAuth2 the proper name for subject is \"resource owner\").\n\nThe authentication challenge is appended to the login provider URL to which the subject's user-agent (browser) is redirected to. The login\nprovider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process."
											},
											"response": [
												{
													"name": "loginRequest",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/login?login_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"login"
															],
															"query": [
																{
																	"key": "login_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"challenge\": \"<string>\",\n\t\"requested_scope\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"requested_access_token_audience\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"skip\": \"<boolean>\",\n\t\"subject\": \"<string>\",\n\t\"client\": {\n\t\t\"allowed_cors_origins\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"audience\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"backchannel_logout_session_required\": \"<boolean>\",\n\t\t\"backchannel_logout_uri\": \"<string>\",\n\t\t\"client_id\": \"<string>\",\n\t\t\"client_name\": \"<string>\",\n\t\t\"client_secret\": \"<string>\",\n\t\t\"client_secret_expires_at\": \"<long>\",\n\t\t\"client_uri\": \"<string>\",\n\t\t\"contacts\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"created_at\": \"<dateTime>\",\n\t\t\"frontchannel_logout_session_required\": \"<boolean>\",\n\t\t\"frontchannel_logout_uri\": \"<string>\",\n\t\t\"grant_types\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"jwks\": \"<object>\",\n\t\t\"jwks_uri\": \"<string>\",\n\t\t\"logo_uri\": \"<string>\",\n\t\t\"metadata\": \"<object>\",\n\t\t\"owner\": \"<string>\",\n\t\t\"policy_uri\": \"<string>\",\n\t\t\"post_logout_redirect_uris\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"redirect_uris\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"request_object_signing_alg\": \"<string>\",\n\t\t\"request_uris\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"response_types\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"scope\": \"<string>\",\n\t\t\"sector_identifier_uri\": \"<string>\",\n\t\t\"subject_type\": \"<string>\",\n\t\t\"token_endpoint_auth_method\": \"<string>\",\n\t\t\"token_endpoint_auth_signing_alg\": \"<string>\",\n\t\t\"tos_uri\": \"<string>\",\n\t\t\"updated_at\": \"<dateTime>\",\n\t\t\"userinfo_signed_response_alg\": \"<string>\"\n\t},\n\t\"request_url\": \"<string>\",\n\t\"oidc_context\": {\n\t\t\"acr_values\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"display\": \"<string>\",\n\t\t\"id_token_hint_claims\": \"<object>\",\n\t\t\"login_hint\": \"<string>\",\n\t\t\"ui_locales\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t]\n\t},\n\t\"session_id\": \"<string>\"\n}"
												},
												{
													"name": "genericError",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/login?login_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"login"
															],
															"query": [
																{
																	"key": "login_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
												},
												{
													"name": "genericError",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/login?login_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"login"
															],
															"query": [
																{
																	"key": "login_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
												},
												{
													"name": "requestWasHandledResponse",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/login?login_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"login"
															],
															"query": [
																{
																	"key": "login_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Gone",
													"code": 410,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"redirect_to\": \"<string>\"\n}"
												},
												{
													"name": "genericError",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/login?login_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"login"
															],
															"query": [
																{
																	"key": "login_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
												}
											]
										},
										{
											"name": "Accept a Login Request",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"subject\": \"ut \",\n    \"acr\": \"labo\",\n    \"context\": \"<object>\",\n    \"force_subject_identifier\": \"ex fugiat aliquip amet dolore\",\n    \"remember\": false,\n    \"remember_for\": -4068005\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/oauth2/auth/requests/login/accept?login_challenge=sit do in dolor Ut",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"oauth2",
														"auth",
														"requests",
														"login",
														"accept"
													],
													"query": [
														{
															"key": "login_challenge",
															"value": "sit do in dolor Ut",
															"description": "(Required) "
														}
													]
												},
												"description": "When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider\n(sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login\nprovider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\")\na subject (in OAuth2 the proper name for subject is \"resource owner\").\n\nThe authentication challenge is appended to the login provider URL to which the subject's user-agent (browser) is redirected to. The login\nprovider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.\n\nThis endpoint tells ORY Hydra that the subject has successfully authenticated and includes additional information such as\nthe subject's ID and if ORY Hydra should remember the subject's subject agent for future authentication attempts by setting\na cookie.\n\nThe response contains a redirect URL which the login provider should redirect the user-agent to."
											},
											"response": [
												{
													"name": "completedRequest",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"subject\": \"<string>\",\n    \"acr\": \"<string>\",\n    \"context\": \"<object>\",\n    \"force_subject_identifier\": \"<string>\",\n    \"remember\": \"<boolean>\",\n    \"remember_for\": \"<integer>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/login/accept?login_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"login",
																"accept"
															],
															"query": [
																{
																	"key": "login_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"redirect_to\": \"<string>\"\n}"
												},
												{
													"name": "genericError",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"subject\": \"<string>\",\n    \"acr\": \"<string>\",\n    \"context\": \"<object>\",\n    \"force_subject_identifier\": \"<string>\",\n    \"remember\": \"<boolean>\",\n    \"remember_for\": \"<integer>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/login/accept?login_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"login",
																"accept"
															],
															"query": [
																{
																	"key": "login_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
												},
												{
													"name": "genericError",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"subject\": \"<string>\",\n    \"acr\": \"<string>\",\n    \"context\": \"<object>\",\n    \"force_subject_identifier\": \"<string>\",\n    \"remember\": \"<boolean>\",\n    \"remember_for\": \"<integer>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/login/accept?login_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"login",
																"accept"
															],
															"query": [
																{
																	"key": "login_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
												},
												{
													"name": "genericError",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"subject\": \"<string>\",\n    \"acr\": \"<string>\",\n    \"context\": \"<object>\",\n    \"force_subject_identifier\": \"<string>\",\n    \"remember\": \"<boolean>\",\n    \"remember_for\": \"<integer>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/login/accept?login_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"login",
																"accept"
															],
															"query": [
																{
																	"key": "login_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
												},
												{
													"name": "genericError",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"subject\": \"<string>\",\n    \"acr\": \"<string>\",\n    \"context\": \"<object>\",\n    \"force_subject_identifier\": \"<string>\",\n    \"remember\": \"<boolean>\",\n    \"remember_for\": \"<integer>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/login/accept?login_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"login",
																"accept"
															],
															"query": [
																{
																	"key": "login_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
												}
											]
										},
										{
											"name": "Reject a Login Request",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"error\": \"aliqua proident sit nisi\",\n    \"error_debug\": \"fugiat voluptate sit exercitation\",\n    \"error_description\": \"ea aute Ut\",\n    \"error_hint\": \"irure exercita\",\n    \"status_code\": 56601529\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/oauth2/auth/requests/login/reject?login_challenge=sit do in dolor Ut",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"oauth2",
														"auth",
														"requests",
														"login",
														"reject"
													],
													"query": [
														{
															"key": "login_challenge",
															"value": "sit do in dolor Ut",
															"description": "(Required) "
														}
													]
												},
												"description": "When an authorization code, hybrid, or implicit OAuth 2.0 Flow is initiated, ORY Hydra asks the login provider\n(sometimes called \"identity provider\") to authenticate the subject and then tell ORY Hydra now about it. The login\nprovider is an web-app you write and host, and it must be able to authenticate (\"show the subject a login screen\")\na subject (in OAuth2 the proper name for subject is \"resource owner\").\n\nThe authentication challenge is appended to the login provider URL to which the subject's user-agent (browser) is redirected to. The login\nprovider uses that challenge to fetch information on the OAuth2 request and then accept or reject the requested authentication process.\n\nThis endpoint tells ORY Hydra that the subject has not authenticated and includes a reason why the authentication\nwas be denied.\n\nThe response contains a redirect URL which the login provider should redirect the user-agent to."
											},
											"response": [
												{
													"name": "completedRequest",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/login/reject?login_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"login",
																"reject"
															],
															"query": [
																{
																	"key": "login_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"redirect_to\": \"<string>\"\n}"
												},
												{
													"name": "genericError",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/login/reject?login_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"login",
																"reject"
															],
															"query": [
																{
																	"key": "login_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
												},
												{
													"name": "genericError",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/login/reject?login_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"login",
																"reject"
															],
															"query": [
																{
																	"key": "login_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
												},
												{
													"name": "genericError",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/login/reject?login_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"login",
																"reject"
															],
															"query": [
																{
																	"key": "login_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
												},
												{
													"name": "genericError",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/login/reject?login_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"login",
																"reject"
															],
															"query": [
																{
																	"key": "login_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "logout",
									"item": [
										{
											"name": "Get a Logout Request",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/oauth2/auth/requests/logout?logout_challenge=sit do in dolor Ut",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"oauth2",
														"auth",
														"requests",
														"logout"
													],
													"query": [
														{
															"key": "logout_challenge",
															"value": "sit do in dolor Ut",
															"description": "(Required) "
														}
													]
												},
												"description": "Use this endpoint to fetch a logout request."
											},
											"response": [
												{
													"name": "logoutRequest",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/logout?logout_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"logout"
															],
															"query": [
																{
																	"key": "logout_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"challenge\": \"<string>\",\n\t\"request_url\": \"<string>\",\n\t\"rp_initiated\": \"<boolean>\",\n\t\"sid\": \"<string>\",\n\t\"subject\": \"<string>\"\n}"
												},
												{
													"name": "genericError",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/logout?logout_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"logout"
															],
															"query": [
																{
																	"key": "logout_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
												},
												{
													"name": "requestWasHandledResponse",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/logout?logout_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"logout"
															],
															"query": [
																{
																	"key": "logout_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Gone",
													"code": 410,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"redirect_to\": \"<string>\"\n}"
												},
												{
													"name": "genericError",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/logout?logout_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"logout"
															],
															"query": [
																{
																	"key": "logout_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
												}
											]
										},
										{
											"name": "Accept a Logout Request",
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/oauth2/auth/requests/logout/accept?logout_challenge=sit do in dolor Ut",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"oauth2",
														"auth",
														"requests",
														"logout",
														"accept"
													],
													"query": [
														{
															"key": "logout_challenge",
															"value": "sit do in dolor Ut",
															"description": "(Required) "
														}
													]
												},
												"description": "When a user or an application requests ORY Hydra to log out a user, this endpoint is used to confirm that logout request.\nNo body is required.\n\nThe response contains a redirect URL which the consent provider should redirect the user-agent to."
											},
											"response": [
												{
													"name": "completedRequest",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/logout/accept?logout_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"logout",
																"accept"
															],
															"query": [
																{
																	"key": "logout_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"redirect_to\": \"<string>\"\n}"
												},
												{
													"name": "genericError",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/logout/accept?logout_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"logout",
																"accept"
															],
															"query": [
																{
																	"key": "logout_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
												},
												{
													"name": "genericError",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/logout/accept?logout_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"logout",
																"accept"
															],
															"query": [
																{
																	"key": "logout_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
												}
											]
										},
										{
											"name": "Reject a Logout Request",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "error",
															"value": "aliqua proident sit nisi",
															"description": "The error should follow the OAuth2 error format (e.g. `invalid_request`, `login_required`).\n\nDefaults to `request_denied`."
														},
														{
															"key": "error_debug",
															"value": "fugiat voluptate sit exercitation",
															"description": "Debug contains information to help resolve the problem as a developer. Usually not exposed\nto the public but only in the server logs."
														},
														{
															"key": "error_description",
															"value": "ea aute Ut",
															"description": "Description of the error in a human readable format."
														},
														{
															"key": "error_hint",
															"value": "irure exercita",
															"description": "Hint to help resolve the error."
														},
														{
															"key": "status_code",
															"value": "56601529",
															"description": "Represents the HTTP status code of the error (e.g. 401 or 403)\n\nDefaults to 400"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/oauth2/auth/requests/logout/reject?logout_challenge=sit do in dolor Ut",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"oauth2",
														"auth",
														"requests",
														"logout",
														"reject"
													],
													"query": [
														{
															"key": "logout_challenge",
															"value": "sit do in dolor Ut",
															"description": "(Required) "
														}
													]
												},
												"description": "When a user or an application requests ORY Hydra to log out a user, this endpoint is used to deny that logout request.\nNo body is required.\n\nThe response is empty as the logout provider has to chose what action to perform next."
											},
											"response": [
												{
													"name": "Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\ntypically 201.",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "error",
																	"value": "<string>",
																	"description": "The error should follow the OAuth2 error format (e.g. `invalid_request`, `login_required`).\n\nDefaults to `request_denied`."
																},
																{
																	"key": "error_debug",
																	"value": "<string>",
																	"description": "Debug contains information to help resolve the problem as a developer. Usually not exposed\nto the public but only in the server logs."
																},
																{
																	"key": "error_description",
																	"value": "<string>",
																	"description": "Description of the error in a human readable format."
																},
																{
																	"key": "error_hint",
																	"value": "<string>",
																	"description": "Hint to help resolve the error."
																},
																{
																	"key": "status_code",
																	"value": "<integer>",
																	"description": "Represents the HTTP status code of the error (e.g. 401 or 403)\n\nDefaults to 400"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/logout/reject?logout_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"logout",
																"reject"
															],
															"query": [
																{
																	"key": "logout_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "genericError",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "error",
																	"value": "<string>",
																	"description": "The error should follow the OAuth2 error format (e.g. `invalid_request`, `login_required`).\n\nDefaults to `request_denied`."
																},
																{
																	"key": "error_debug",
																	"value": "<string>",
																	"description": "Debug contains information to help resolve the problem as a developer. Usually not exposed\nto the public but only in the server logs."
																},
																{
																	"key": "error_description",
																	"value": "<string>",
																	"description": "Description of the error in a human readable format."
																},
																{
																	"key": "error_hint",
																	"value": "<string>",
																	"description": "Hint to help resolve the error."
																},
																{
																	"key": "status_code",
																	"value": "<integer>",
																	"description": "Represents the HTTP status code of the error (e.g. 401 or 403)\n\nDefaults to 400"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/logout/reject?logout_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"logout",
																"reject"
															],
															"query": [
																{
																	"key": "logout_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
												},
												{
													"name": "genericError",
													"originalRequest": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "error",
																	"value": "<string>",
																	"description": "The error should follow the OAuth2 error format (e.g. `invalid_request`, `login_required`).\n\nDefaults to `request_denied`."
																},
																{
																	"key": "error_debug",
																	"value": "<string>",
																	"description": "Debug contains information to help resolve the problem as a developer. Usually not exposed\nto the public but only in the server logs."
																},
																{
																	"key": "error_description",
																	"value": "<string>",
																	"description": "Description of the error in a human readable format."
																},
																{
																	"key": "error_hint",
																	"value": "<string>",
																	"description": "Hint to help resolve the error."
																},
																{
																	"key": "status_code",
																	"value": "<integer>",
																	"description": "Represents the HTTP status code of the error (e.g. 401 or 403)\n\nDefaults to 400"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/requests/logout/reject?logout_challenge=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"requests",
																"logout",
																"reject"
															],
															"query": [
																{
																	"key": "logout_challenge",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "sessions",
							"item": [
								{
									"name": "consent",
									"item": [
										{
											"name": "Lists All Consent Sessions of a Subject",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/oauth2/auth/sessions/consent?subject=sit do in dolor Ut",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"oauth2",
														"auth",
														"sessions",
														"consent"
													],
													"query": [
														{
															"key": "subject",
															"value": "sit do in dolor Ut",
															"description": "(Required) "
														}
													]
												},
												"description": "This endpoint lists all subject's granted consent sessions, including client and granted scope.\nIf the subject is unknown or has not granted any consent sessions yet, the endpoint returns an\nempty JSON array with status code 200 OK.\n\n\nThe \"Link\" header is also included in successful responses, which contains one or more links for pagination, formatted like so: '<https://hydra-url/admin/oauth2/auth/sessions/consent?subject={user}&limit={limit}&offset={offset}>; rel=\"{page}\"', where page is one of the following applicable pages: 'first', 'next', 'last', and 'previous'.\nMultiple links can be included in this header, and will be separated by a comma."
											},
											"response": [
												{
													"name": "A list of used consent requests.",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/sessions/consent?subject=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"sessions",
																"consent"
															],
															"query": [
																{
																	"key": "subject",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n\t{\n\t\t\"consent_request\": {\n\t\t\t\"challenge\": \"<string>\",\n\t\t\t\"acr\": \"<string>\",\n\t\t\t\"client\": {\n\t\t\t\t\"allowed_cors_origins\": [\n\t\t\t\t\t\"<string>\",\n\t\t\t\t\t\"<string>\"\n\t\t\t\t],\n\t\t\t\t\"audience\": [\n\t\t\t\t\t\"<string>\",\n\t\t\t\t\t\"<string>\"\n\t\t\t\t],\n\t\t\t\t\"backchannel_logout_session_required\": \"<boolean>\",\n\t\t\t\t\"backchannel_logout_uri\": \"<string>\",\n\t\t\t\t\"client_id\": \"<string>\",\n\t\t\t\t\"client_name\": \"<string>\",\n\t\t\t\t\"client_secret\": \"<string>\",\n\t\t\t\t\"client_secret_expires_at\": \"<long>\",\n\t\t\t\t\"client_uri\": \"<string>\",\n\t\t\t\t\"contacts\": [\n\t\t\t\t\t\"<string>\",\n\t\t\t\t\t\"<string>\"\n\t\t\t\t],\n\t\t\t\t\"created_at\": \"<dateTime>\",\n\t\t\t\t\"frontchannel_logout_session_required\": \"<boolean>\",\n\t\t\t\t\"frontchannel_logout_uri\": \"<string>\",\n\t\t\t\t\"grant_types\": [\n\t\t\t\t\t\"<string>\",\n\t\t\t\t\t\"<string>\"\n\t\t\t\t],\n\t\t\t\t\"jwks\": \"<object>\",\n\t\t\t\t\"jwks_uri\": \"<string>\",\n\t\t\t\t\"logo_uri\": \"<string>\",\n\t\t\t\t\"metadata\": \"<object>\",\n\t\t\t\t\"owner\": \"<string>\",\n\t\t\t\t\"policy_uri\": \"<string>\",\n\t\t\t\t\"post_logout_redirect_uris\": [\n\t\t\t\t\t\"<string>\",\n\t\t\t\t\t\"<string>\"\n\t\t\t\t],\n\t\t\t\t\"redirect_uris\": [\n\t\t\t\t\t\"<string>\",\n\t\t\t\t\t\"<string>\"\n\t\t\t\t],\n\t\t\t\t\"request_object_signing_alg\": \"<string>\",\n\t\t\t\t\"request_uris\": [\n\t\t\t\t\t\"<string>\",\n\t\t\t\t\t\"<string>\"\n\t\t\t\t],\n\t\t\t\t\"response_types\": [\n\t\t\t\t\t\"<string>\",\n\t\t\t\t\t\"<string>\"\n\t\t\t\t],\n\t\t\t\t\"scope\": \"<string>\",\n\t\t\t\t\"sector_identifier_uri\": \"<string>\",\n\t\t\t\t\"subject_type\": \"<string>\",\n\t\t\t\t\"token_endpoint_auth_method\": \"<string>\",\n\t\t\t\t\"token_endpoint_auth_signing_alg\": \"<string>\",\n\t\t\t\t\"tos_uri\": \"<string>\",\n\t\t\t\t\"updated_at\": \"<dateTime>\",\n\t\t\t\t\"userinfo_signed_response_alg\": \"<string>\"\n\t\t\t},\n\t\t\t\"context\": \"<object>\",\n\t\t\t\"login_challenge\": \"<string>\",\n\t\t\t\"login_session_id\": \"<string>\",\n\t\t\t\"oidc_context\": {\n\t\t\t\t\"acr_values\": [\n\t\t\t\t\t\"<string>\",\n\t\t\t\t\t\"<string>\"\n\t\t\t\t],\n\t\t\t\t\"display\": \"<string>\",\n\t\t\t\t\"id_token_hint_claims\": \"<object>\",\n\t\t\t\t\"login_hint\": \"<string>\",\n\t\t\t\t\"ui_locales\": [\n\t\t\t\t\t\"<string>\",\n\t\t\t\t\t\"<string>\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"request_url\": \"<string>\",\n\t\t\t\"requested_access_token_audience\": [\n\t\t\t\t\"<string>\",\n\t\t\t\t\"<string>\"\n\t\t\t],\n\t\t\t\"requested_scope\": [\n\t\t\t\t\"<string>\",\n\t\t\t\t\"<string>\"\n\t\t\t],\n\t\t\t\"skip\": \"<boolean>\",\n\t\t\t\"subject\": \"<string>\"\n\t\t},\n\t\t\"grant_access_token_audience\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"grant_scope\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"handled_at\": \"1985-07-07T13:02:32.259Z\",\n\t\t\"remember\": \"<boolean>\",\n\t\t\"remember_for\": \"<long>\",\n\t\t\"session\": {\n\t\t\t\"access_token\": {},\n\t\t\t\"id_token\": {}\n\t\t}\n\t},\n\t{\n\t\t\"consent_request\": {\n\t\t\t\"challenge\": \"<string>\",\n\t\t\t\"acr\": \"<string>\",\n\t\t\t\"client\": {\n\t\t\t\t\"allowed_cors_origins\": [\n\t\t\t\t\t\"<string>\",\n\t\t\t\t\t\"<string>\"\n\t\t\t\t],\n\t\t\t\t\"audience\": [\n\t\t\t\t\t\"<string>\",\n\t\t\t\t\t\"<string>\"\n\t\t\t\t],\n\t\t\t\t\"backchannel_logout_session_required\": \"<boolean>\",\n\t\t\t\t\"backchannel_logout_uri\": \"<string>\",\n\t\t\t\t\"client_id\": \"<string>\",\n\t\t\t\t\"client_name\": \"<string>\",\n\t\t\t\t\"client_secret\": \"<string>\",\n\t\t\t\t\"client_secret_expires_at\": \"<long>\",\n\t\t\t\t\"client_uri\": \"<string>\",\n\t\t\t\t\"contacts\": [\n\t\t\t\t\t\"<string>\",\n\t\t\t\t\t\"<string>\"\n\t\t\t\t],\n\t\t\t\t\"created_at\": \"<dateTime>\",\n\t\t\t\t\"frontchannel_logout_session_required\": \"<boolean>\",\n\t\t\t\t\"frontchannel_logout_uri\": \"<string>\",\n\t\t\t\t\"grant_types\": [\n\t\t\t\t\t\"<string>\",\n\t\t\t\t\t\"<string>\"\n\t\t\t\t],\n\t\t\t\t\"jwks\": \"<object>\",\n\t\t\t\t\"jwks_uri\": \"<string>\",\n\t\t\t\t\"logo_uri\": \"<string>\",\n\t\t\t\t\"metadata\": \"<object>\",\n\t\t\t\t\"owner\": \"<string>\",\n\t\t\t\t\"policy_uri\": \"<string>\",\n\t\t\t\t\"post_logout_redirect_uris\": [\n\t\t\t\t\t\"<string>\",\n\t\t\t\t\t\"<string>\"\n\t\t\t\t],\n\t\t\t\t\"redirect_uris\": [\n\t\t\t\t\t\"<string>\",\n\t\t\t\t\t\"<string>\"\n\t\t\t\t],\n\t\t\t\t\"request_object_signing_alg\": \"<string>\",\n\t\t\t\t\"request_uris\": [\n\t\t\t\t\t\"<string>\",\n\t\t\t\t\t\"<string>\"\n\t\t\t\t],\n\t\t\t\t\"response_types\": [\n\t\t\t\t\t\"<string>\",\n\t\t\t\t\t\"<string>\"\n\t\t\t\t],\n\t\t\t\t\"scope\": \"<string>\",\n\t\t\t\t\"sector_identifier_uri\": \"<string>\",\n\t\t\t\t\"subject_type\": \"<string>\",\n\t\t\t\t\"token_endpoint_auth_method\": \"<string>\",\n\t\t\t\t\"token_endpoint_auth_signing_alg\": \"<string>\",\n\t\t\t\t\"tos_uri\": \"<string>\",\n\t\t\t\t\"updated_at\": \"<dateTime>\",\n\t\t\t\t\"userinfo_signed_response_alg\": \"<string>\"\n\t\t\t},\n\t\t\t\"context\": \"<object>\",\n\t\t\t\"login_challenge\": \"<string>\",\n\t\t\t\"login_session_id\": \"<string>\",\n\t\t\t\"oidc_context\": {\n\t\t\t\t\"acr_values\": [\n\t\t\t\t\t\"<string>\",\n\t\t\t\t\t\"<string>\"\n\t\t\t\t],\n\t\t\t\t\"display\": \"<string>\",\n\t\t\t\t\"id_token_hint_claims\": \"<object>\",\n\t\t\t\t\"login_hint\": \"<string>\",\n\t\t\t\t\"ui_locales\": [\n\t\t\t\t\t\"<string>\",\n\t\t\t\t\t\"<string>\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"request_url\": \"<string>\",\n\t\t\t\"requested_access_token_audience\": [\n\t\t\t\t\"<string>\",\n\t\t\t\t\"<string>\"\n\t\t\t],\n\t\t\t\"requested_scope\": [\n\t\t\t\t\"<string>\",\n\t\t\t\t\"<string>\"\n\t\t\t],\n\t\t\t\"skip\": \"<boolean>\",\n\t\t\t\"subject\": \"<string>\"\n\t\t},\n\t\t\"grant_access_token_audience\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"grant_scope\": [\n\t\t\t\"<string>\",\n\t\t\t\"<string>\"\n\t\t],\n\t\t\"handled_at\": \"2018-07-28T23:11:22.760Z\",\n\t\t\"remember\": \"<boolean>\",\n\t\t\"remember_for\": \"<long>\",\n\t\t\"session\": {\n\t\t\t\"access_token\": {},\n\t\t\t\"id_token\": {}\n\t\t}\n\t}\n]"
												},
												{
													"name": "genericError",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/sessions/consent?subject=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"sessions",
																"consent"
															],
															"query": [
																{
																	"key": "subject",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
												},
												{
													"name": "genericError",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/sessions/consent?subject=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"sessions",
																"consent"
															],
															"query": [
																{
																	"key": "subject",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
												}
											]
										},
										{
											"name": "Revokes Consent Sessions of a Subject for a Specific OAuth 2.0 Client",
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/oauth2/auth/sessions/consent?subject=sit do in dolor Ut&client=sit do in dolor Ut&all=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"oauth2",
														"auth",
														"sessions",
														"consent"
													],
													"query": [
														{
															"key": "subject",
															"value": "sit do in dolor Ut",
															"description": "(Required) The subject (Subject) who's consent sessions should be deleted."
														},
														{
															"key": "client",
															"value": "sit do in dolor Ut",
															"description": "If set, deletes only those consent sessions by the Subject that have been granted to the specified OAuth 2.0 Client ID"
														},
														{
															"key": "all",
															"value": "true",
															"description": "If set to `?all=true`, deletes all consent sessions by the Subject that have been granted."
														}
													]
												},
												"description": "This endpoint revokes a subject's granted consent sessions for a specific OAuth 2.0 Client and invalidates all\nassociated OAuth 2.0 Access Tokens."
											},
											"response": [
												{
													"name": "Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\ntypically 201.",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/sessions/consent?subject=<string>&client=<string>&all=<boolean>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"sessions",
																"consent"
															],
															"query": [
																{
																	"key": "subject",
																	"value": "<string>"
																},
																{
																	"key": "client",
																	"value": "<string>"
																},
																{
																	"key": "all",
																	"value": "<boolean>"
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "text/plain"
														}
													],
													"cookie": [],
													"body": ""
												},
												{
													"name": "genericError",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/sessions/consent?subject=<string>&client=<string>&all=<boolean>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"sessions",
																"consent"
															],
															"query": [
																{
																	"key": "subject",
																	"value": "<string>"
																},
																{
																	"key": "client",
																	"value": "<string>"
																},
																{
																	"key": "all",
																	"value": "<boolean>"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
												},
												{
													"name": "genericError",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/oauth2/auth/sessions/consent?subject=<string>&client=<string>&all=<boolean>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"oauth2",
																"auth",
																"sessions",
																"consent"
															],
															"query": [
																{
																	"key": "subject",
																	"value": "<string>"
																},
																{
																	"key": "client",
																	"value": "<string>"
																},
																{
																	"key": "all",
																	"value": "<boolean>"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "Invalidates All Login Sessions of a Certain User\nInvalidates a Subject's Authentication Session",
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/oauth2/auth/sessions/login?subject=sit do in dolor Ut",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"oauth2",
												"auth",
												"sessions",
												"login"
											],
											"query": [
												{
													"key": "subject",
													"value": "sit do in dolor Ut",
													"description": "(Required) "
												}
											]
										},
										"description": "This endpoint invalidates a subject's authentication session. After revoking the authentication session, the subject\nhas to re-authenticate at ORY Hydra. This endpoint does not invalidate any tokens and does not work with OpenID Connect\nFront- or Back-channel logout."
									},
									"response": [
										{
											"name": "Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\ntypically 201.",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/oauth2/auth/sessions/login?subject=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"oauth2",
														"auth",
														"sessions",
														"login"
													],
													"query": [
														{
															"key": "subject",
															"value": "<string>"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "genericError",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/oauth2/auth/sessions/login?subject=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"oauth2",
														"auth",
														"sessions",
														"login"
													],
													"query": [
														{
															"key": "subject",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
										},
										{
											"name": "genericError",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/oauth2/auth/sessions/login?subject=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"oauth2",
														"auth",
														"sessions",
														"login"
													],
													"query": [
														{
															"key": "subject",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "The OAuth 2.0 Authorize Endpoint",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/oauth2/auth",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"auth"
									]
								},
								"description": "This endpoint is not documented here because you should never use your own implementation to perform OAuth2 flows.\nOAuth2 is a very popular protocol and a library for your programming language will exists.\n\nTo learn more about this flow please refer to the specification: https://tools.ietf.org/html/rfc6749"
							},
							"response": [
								{
									"name": "Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\ntypically 201.",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/oauth2/auth",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"oauth2",
												"auth"
											]
										}
									},
									"status": "Found",
									"code": 302,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "genericError",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/oauth2/auth",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"oauth2",
												"auth"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
								},
								{
									"name": "genericError",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/oauth2/auth",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"oauth2",
												"auth"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Flush Expired OAuth2 Access Tokens",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"notAfter\": \"1992-05-12T01:06:20.323Z\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/oauth2/flush",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								"flush"
							]
						},
						"description": "This endpoint flushes expired OAuth2 access tokens from the database. You can set a time after which no tokens will be\nnot be touched, in case you want to keep recent tokens for auditing. Refresh tokens can not be flushed as they are deleted\nautomatically when performing the refresh flow."
					},
					"response": [
						{
							"name": "Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\ntypically 201.",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"notAfter\": \"<dateTime>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/flush",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"flush"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"notAfter\": \"<dateTime>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/flush",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"flush"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"notAfter\": \"<dateTime>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/flush",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"flush"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						}
					]
				},
				{
					"name": "Introspect OAuth2 Tokens",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "quis dolor anim",
									"description": "(Required) The string value of the token. For access tokens, this\nis the \"access_token\" value returned from the token endpoint\ndefined in OAuth 2.0. For refresh tokens, this is the \"refresh_token\"\nvalue returned."
								},
								{
									"key": "scope",
									"value": "proident elit enim nostrud",
									"description": "An optional, space separated list of required scopes. If the access token was not granted one of the\nscopes, the result of active will be false."
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/oauth2/introspect",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								"introspect"
							]
						},
						"description": "The introspection endpoint allows to check if a token (both refresh and access) is active or not. An active token\nis neither expired nor revoked. If a token is active, additional information on the token will be included. You can\nset additional data for a token by setting `accessTokenExtra` during the consent flow.\n\nFor more information [read this blog post](https://www.oauth.com/oauth2-servers/token-introspection-endpoint/)."
					},
					"response": [
						{
							"name": "oAuth2TokenIntrospection",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "(Required) The string value of the token. For access tokens, this\nis the \"access_token\" value returned from the token endpoint\ndefined in OAuth 2.0. For refresh tokens, this is the \"refresh_token\"\nvalue returned."
										},
										{
											"key": "scope",
											"value": "<string>",
											"description": "An optional, space separated list of required scopes. If the access token was not granted one of the\nscopes, the result of active will be false."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/introspect",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"introspect"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"active\": \"<boolean>\",\n\t\"aud\": [\n\t\t\"<string>\",\n\t\t\"<string>\"\n\t],\n\t\"client_id\": \"<string>\",\n\t\"exp\": \"<long>\",\n\t\"ext\": \"<object>\",\n\t\"iat\": \"<long>\",\n\t\"iss\": \"<string>\",\n\t\"nbf\": \"<long>\",\n\t\"obfuscated_subject\": \"<string>\",\n\t\"scope\": \"<string>\",\n\t\"sub\": \"<string>\",\n\t\"token_type\": \"<string>\",\n\t\"token_use\": \"<string>\",\n\t\"username\": \"<string>\"\n}"
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "(Required) The string value of the token. For access tokens, this\nis the \"access_token\" value returned from the token endpoint\ndefined in OAuth 2.0. For refresh tokens, this is the \"refresh_token\"\nvalue returned."
										},
										{
											"key": "scope",
											"value": "<string>",
											"description": "An optional, space separated list of required scopes. If the access token was not granted one of the\nscopes, the result of active will be false."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/introspect",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"introspect"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "(Required) The string value of the token. For access tokens, this\nis the \"access_token\" value returned from the token endpoint\ndefined in OAuth 2.0. For refresh tokens, this is the \"refresh_token\"\nvalue returned."
										},
										{
											"key": "scope",
											"value": "<string>",
											"description": "An optional, space separated list of required scopes. If the access token was not granted one of the\nscopes, the result of active will be false."
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/introspect",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"introspect"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						}
					]
				},
				{
					"name": "Revoke OAuth2 Tokens",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "token",
									"value": "fugiat",
									"description": "(Required) "
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/oauth2/revoke",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								"revoke"
							]
						},
						"description": "Revoking a token (both access and refresh) means that the tokens will be invalid. A revoked access token can no\nlonger be used to make access requests, and a revoked refresh token can no longer be used to refresh an access token.\nRevoking a refresh token also invalidates the access token that was created with it. A token may only be revoked by\nthe client the token was generated for."
					},
					"response": [
						{
							"name": "Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\ntypically 201.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/revoke",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"revoke"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/revoke",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"revoke"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "token",
											"value": "<string>",
											"description": "(Required) "
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/revoke",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"revoke"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						}
					]
				},
				{
					"name": "OpenID Connect Front-Backchannel Enabled Logout",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/oauth2/sessions/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								"sessions",
								"logout"
							]
						},
						"description": "This endpoint initiates and completes user logout at ORY Hydra and initiates OpenID Connect Front-/Back-channel logout:\n\nhttps://openid.net/specs/openid-connect-frontchannel-1_0.html\nhttps://openid.net/specs/openid-connect-backchannel-1_0.html"
					},
					"response": [
						{
							"name": "Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\ntypically 201.",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/oauth2/sessions/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"sessions",
										"logout"
									]
								}
							},
							"status": "Found",
							"code": 302,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "The OAuth 2.0 Token Endpoint",
					"request": {
						"auth": {
							"type": "oauth2"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "authorization_code",
									"description": "(Required) "
								},
								{
									"key": "code",
									"value": "YDnJPXqGRj146X0zSn4qcx4pn127ZrIkR83LYW6e3M.7lF0tyAXwhhE0X2cDBpSeFg_fcK_cUKgssDf9WG-ou"
								},
								{
									"key": "refresh_token",
									"value": "fhEjl2EedTKhRLCIj5_UdNhEyXERS4sTNm6_BiHOVhM.64Th8unpX8c_WeGz2VBe3747erdZyXVTSbzjiMeY_v8",
									"disabled": true
								},
								{
									"key": "redirect_uri",
									"value": "http://127.0.0.1:8001/token"
								},
								{
									"key": "client_id",
									"value": "auth-code-client1"
								},
								{
									"key": "client_secret",
									"value": "CZVfUNp-3GdsdpBatKs-YjGz8D",
									"type": "text"
								},
								{
									"key": "state",
									"value": "hfmbwrcioqyzkypilqeumqbm",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseUrl1}}/oauth2/token",
							"host": [
								"{{baseUrl1}}"
							],
							"path": [
								"oauth2",
								"token"
							]
						},
						"description": "The client makes a request to the token endpoint by sending the\nfollowing parameters using the \"application/x-www-form-urlencoded\" HTTP\nrequest entity-body.\n\n> Do not implement a client for this endpoint yourself. Use a library. There are many libraries\n> available for any programming language. You can find a list of libraries here: https://oauth.net/code/\n>\n> Do note that Hydra SDK does not implement this endpoint properly. Use one of the libraries listed above!"
					},
					"response": [
						{
							"name": "oauth2TokenResponse",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "code",
											"value": "<string>"
										},
										{
											"key": "refresh_token",
											"value": "<string>"
										},
										{
											"key": "redirect_uri",
											"value": "<string>"
										},
										{
											"key": "client_id",
											"value": "<string>"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"access_token\": \"<string>\",\n\t\"expires_in\": \"<long>\",\n\t\"id_token\": \"<string>\",\n\t\"refresh_token\": \"<string>\",\n\t\"scope\": \"<string>\",\n\t\"token_type\": \"<string>\"\n}"
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "code",
											"value": "<string>"
										},
										{
											"key": "refresh_token",
											"value": "<string>"
										},
										{
											"key": "redirect_uri",
											"value": "<string>"
										},
										{
											"key": "client_id",
											"value": "<string>"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "code",
											"value": "<string>"
										},
										{
											"key": "refresh_token",
											"value": "<string>"
										},
										{
											"key": "redirect_uri",
											"value": "<string>"
										},
										{
											"key": "client_id",
											"value": "<string>"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "<string>",
											"description": "(Required) "
										},
										{
											"key": "code",
											"value": "<string>"
										},
										{
											"key": "refresh_token",
											"value": "<string>"
										},
										{
											"key": "redirect_uri",
											"value": "<string>"
										},
										{
											"key": "client_id",
											"value": "<string>"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/oauth2/token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						},
						{
							"name": "The OAuth 2.0 Token Endpoint",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "authorization_code",
											"description": "(Required) "
										},
										{
											"key": "code",
											"value": "DgmvA1cI0mTA20DCp2QBuh99YHOg2QNqHm_y5B9Sxi8.t4tFpNE6tfcLO7TCVMhc7P948tmDO53f8pIo_T_62CM"
										},
										{
											"key": "refresh_token",
											"value": "fhEjl2EedTKhRLCIj5_UdNhEyXERS4sTNm6_BiHOVhM.64Th8unpX8c_WeGz2VBe3747erdZyXVTSbzjiMeY_v8",
											"disabled": true
										},
										{
											"key": "redirect_uri",
											"value": "http://127.0.0.1:5555/callback"
										},
										{
											"key": "client_id",
											"value": "auth-code-client1"
										},
										{
											"key": "client_secret",
											"value": "CZVfUNp-3GdsdpBatKs-YjGz8D",
											"type": "text"
										},
										{
											"key": "state",
											"value": "hfmbwrcioqyzkypilqeumqbm",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{baseUrl1}}/oauth2/token",
									"host": [
										"{{baseUrl1}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Cache-Control",
									"value": "no-store"
								},
								{
									"key": "Content-Type",
									"value": "application/json;charset=UTF-8"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Date",
									"value": "Tue, 15 Feb 2022 08:20:58 GMT"
								},
								{
									"key": "Content-Length",
									"value": "1501"
								}
							],
							"cookie": [],
							"body": "{\n    \"access_token\": \"p3eBw37sO8gczVNgxgiHuhXq03GbuhPvCq1Fy0G_ZTM.a6-ErC0UEQAJjYFIPn4LA8DSRkc4VLGpXh1J9lJDN2k\",\n    \"expires_in\": 3599,\n    \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6InB1YmxpYzo5NDIyNjY5OC1hODJjLTRiOGQtYjY5OS03NWJjZmMzMDhiZmQifQ.eyJhY3IiOiIwIiwiYXRfaGFzaCI6InV3Zmp3WjlULUZiU0lESHhVYXluX3ciLCJhdWQiOlsiYXV0aC1jb2RlLWNsaWVudDEiXSwiYXV0aF90aW1lIjoxNjQ0OTEzMTkxLCJleHAiOjE2NDQ5MTY4NTgsImlhdCI6MTY0NDkxMzI1OCwiaXNzIjoiaHR0cDovLzEyNy4wLjAuMTo0NDQ0LyIsImp0aSI6IjMxNDNjMWRkLTllNTUtNDUyYy1hZDdmLWFlY2U2OWU0YmU1ZiIsIm5vbmNlIjoiY2JjdnVyY3RjZGR3Zmh6c25sdHd5emJ5IiwicmF0IjoxNjQ0OTEzMTg0LCJzaWQiOiI5NjhmMGI4MC1kNzNjLTQ1NjgtOTdjNy0yYWM4YTkxYTVlNDEiLCJzdWIiOiJhbGlhcyB1c2VyIGlkIn0.UlUyyhn6eHAWZnM7oDnc9FM4agZWHKKI9Rza8nbeC1RaESGrvAdBLWC8H7YRYiVkUiETyvXBDUOAqO_B1PZBD8No92QSSjmVLHdVtLVaJPZDzb3X5H4EIYW422ARtMyA5hsd0bgMUvbEzldfHro3W4QAjQOIO9yNl-jA4JabMBv8NRJD-qswwrYAgpc7LkfODN1vTUBFZCqQYhSCQHPBmkCgQBZVpJ3wndWYjN2uuuXHNTR28u4dPq1vOrB1NgK_Qck6z5NrOAcjqvSQbxMAVPgoJTiBrVRTd9YspmKskc_6Qmp5UR6kvYSndBOucpFX8-PIu7Qy-w_A6Tji29dRVSvnNTk-e5k1hbytWRRnu2h-5QpyOp7Op7kXrwRB2Cm21h1B75mRCfbMOctnqnjxDg6EeRDhapBWUVqFT9ow0F2e1kGHANjeiY4CmY9aJv8gWQcHq_tL3dOEmMLFzkH0lr_KnVBiqUOB5IahOBaz9A8Md-e166RPMSsId1nBZmSA0hV2aYNTQwDqLoMmD5EfI6tRAodwdHhHQYPBGZCzHTW61YUxf3HJqevDKjKEjrwODxVXtEHLQTLdt4fHpShIrYs3-PKrb7t-vJ3ubB2yvzTUmc5-aXaRLzuEGa_XUnKdDi_72GLptJzUgJXBrwzVJ8sdxssRo4cGaJv8_UIjAQc\",\n    \"refresh_token\": \"0Zbe3pswDS1Agx05mcoLtQCkkgljAtIiW1rSD-mwHc0.Iwop7kLb4VwbPxI086rNz_6tpLjDTVnoF5NN51roG4c\",\n    \"scope\": \"openid offline\",\n    \"token_type\": \"bearer\"\n}"
						}
					]
				},
				{
					"name": "Delete OAuth2 Access Tokens from a Client",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/oauth2/tokens?client_id=sit do in dolor Ut",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth2",
								"tokens"
							],
							"query": [
								{
									"key": "client_id",
									"value": "sit do in dolor Ut",
									"description": "(Required) "
								}
							]
						},
						"description": "This endpoint deletes OAuth2 access tokens issued for a client from the database"
					},
					"response": [
						{
							"name": "Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\ntypically 201.",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/oauth2/tokens?client_id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"tokens"
									],
									"query": [
										{
											"key": "client_id",
											"value": "<string>"
										}
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/oauth2/tokens?client_id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"tokens"
									],
									"query": [
										{
											"key": "client_id",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						},
						{
							"name": "genericError",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/oauth2/tokens?client_id=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"oauth2",
										"tokens"
									],
									"query": [
										{
											"key": "client_id",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Get Snapshot Metrics from the Hydra Service.",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/metrics/prometheus",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"metrics",
						"prometheus"
					]
				},
				"description": "If you're using k8s, you can then add annotations to your deployment like so:\n\n```\nmetadata:\nannotations:\nprometheus.io/port: \"4445\"\nprometheus.io/path: \"/metrics/prometheus\"\n```\n\nIf the service supports TLS Edge Termination, this endpoint does not require the\n`X-Forwarded-Proto` header to be set."
			},
			"response": [
				{
					"name": "Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is\ntypically 201.",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/metrics/prometheus",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"metrics",
								"prometheus"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "OpenID Connect Userinfo",
			"request": {
				"auth": {
					"type": "oauth2"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl1}}/userinfo",
					"host": [
						"{{baseUrl1}}"
					],
					"path": [
						"userinfo"
					]
				},
				"description": "This endpoint returns the payload of the ID Token, including the idTokenExtra values, of\nthe provided OAuth 2.0 Access Token.\n\nFor more information please [refer to the spec](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo)."
			},
			"response": [
				{
					"name": "userinfoResponse",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: oauth2",
								"key": "Authorization",
								"value": "<token>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/userinfo",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"userinfo"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n\t\"birthdate\": \"<string>\",\n\t\"email\": \"<string>\",\n\t\"email_verified\": \"<boolean>\",\n\t\"family_name\": \"<string>\",\n\t\"gender\": \"<string>\",\n\t\"given_name\": \"<string>\",\n\t\"locale\": \"<string>\",\n\t\"middle_name\": \"<string>\",\n\t\"name\": \"<string>\",\n\t\"nickname\": \"<string>\",\n\t\"phone_number\": \"<string>\",\n\t\"phone_number_verified\": \"<boolean>\",\n\t\"picture\": \"<string>\",\n\t\"preferred_username\": \"<string>\",\n\t\"profile\": \"<string>\",\n\t\"sub\": \"<string>\",\n\t\"updated_at\": \"<long>\",\n\t\"website\": \"<string>\",\n\t\"zoneinfo\": \"<string>\"\n}"
				},
				{
					"name": "genericError",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: oauth2",
								"key": "Authorization",
								"value": "<token>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/userinfo",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"userinfo"
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
				},
				{
					"name": "genericError",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": "Added as a part of security scheme: oauth2",
								"key": "Authorization",
								"value": "<token>"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/userinfo",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"userinfo"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n\t\"error\": \"<string>\",\n\t\"debug\": \"<string>\",\n\t\"error_description\": \"<string>\",\n\t\"status_code\": \"<long>\"\n}"
				}
			]
		},
		{
			"name": "Get Service Version",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/version",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"version"
					]
				},
				"description": "This endpoint returns the service version typically notated using semantic versioning.\n\nIf the service supports TLS Edge Termination, this endpoint does not require the\n`X-Forwarded-Proto` header to be set."
			},
			"response": [
				{
					"name": "version",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/version",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"version"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n\t\"version\": \"<string>\"\n}"
				}
			]
		},
		{
			"name": "challenge",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:4444/oauth2/auth?audience=&max_age=0&nonce=cbcvurctcddwfhzsnltwyz343&prompt=&redirect_uri=http://127.0.0.1:8000/api/token&response_type=code&scope=openid+offline&state=dsfssfsfsfsfslmksmf&client_id=videowiki",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "4444",
					"path": [
						"oauth2",
						"auth"
					],
					"query": [
						{
							"key": "audience",
							"value": ""
						},
						{
							"key": "max_age",
							"value": "0"
						},
						{
							"key": "nonce",
							"value": "cbcvurctcddwfhzsnltwyz343"
						},
						{
							"key": "prompt",
							"value": ""
						},
						{
							"key": "redirect_uri",
							"value": "http://127.0.0.1:8000/api/token"
						},
						{
							"key": "response_type",
							"value": "code"
						},
						{
							"key": "scope",
							"value": "openid+offline"
						},
						{
							"key": "state",
							"value": "dsfssfsfsfsfslmksmf"
						},
						{
							"key": "",
							"value": "8000",
							"disabled": true
						},
						{
							"key": "client_id",
							"value": "videowiki"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "{{baseUrl}}",
			"value": "http://localhost:3000\n/"
		}
	]
}